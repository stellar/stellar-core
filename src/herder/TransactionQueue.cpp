// Copyright 2019 Stellar Development Foundation and contributors. Licensed
// under the Apache License, Version 2.0. See the COPYING file at the root
// of this distribution or at http://www.apache.org/licenses/LICENSE-2.0

#include "herder/TransactionQueue.h"
#include "crypto/Hex.h"
#include "crypto/SecretKey.h"
#include "herder/SurgePricingUtils.h"
#include "herder/TxQueueLimiter.h"
#include "ledger/LedgerHashUtils.h"
#include "ledger/LedgerManager.h"
#include "ledger/LedgerTxn.h"
#include "ledger/LedgerTxnImpl.h"
#include "main/Application.h"
#include "overlay/OverlayManager.h"
#include "transactions/FeeBumpTransactionFrame.h"
#include "transactions/MutableTransactionResult.h"
#include "transactions/OperationFrame.h"
#include "transactions/TransactionBridge.h"
#include "transactions/TransactionUtils.h"
#include "util/BitSet.h"
#include "util/GlobalChecks.h"
#include "util/HashOfHash.h"
#include "util/Math.h"
#include "util/ProtocolVersion.h"
#include "util/TarjanSCCCalculator.h"
#include "util/XDROperators.h"
#include "util/numeric128.h"

#include <Tracy.hpp>
#include <algorithm>
#include <fmt/format.h>
#include <functional>
#include <limits>
#include <medida/meter.h>
#include <medida/metrics_registry.h>
#include <medida/timer.h>
#include <numeric>
#include <optional>
#include <random>

#ifdef BUILD_TESTS
#include "test/TxTests.h"
#include "transactions/test/TransactionTestFrame.h"
#endif

namespace stellar
{
namespace
{
constexpr size_t KEYS_TO_FILTER_COUNT = 478;
std::array<std::string, KEYS_TO_FILTER_COUNT> KEYS_TO_FILTER_BASE64 = {
    "AAAABgAAAAECJebmm5Gf9KVQzVA2k/e6t2+DyzqznG2pDjLMXRY5SQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAAAAAADgnrF75ZzRF5KgLvEbdR/RWXe816xcs7htCODG8wfNFAAAAAE=",
    "AAAABgAAAAED8UoK/NtcGqzBGOA9nfS9bMsj2x6RZ6orxUrDl9VXBwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAEGwpHU9jIU7jOIacldZ1TnDesD1ioAhwSKh2f2dSmsogAAABQAAAAB",
    "AAAABgAAAAEJJbDW6vE0ESj5UnV6RZWiRa21v2HLR5TJALZONoDCoQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARb3F/jbb6qeZLk7qv4OrymMzA/pZa5IK/C+wtwrCfKcAAAAAQ==",
    "AAAABgAAAAEJJbDW6vE0ESj5UnV6RZWiRa21v2HLR5TJALZONoDCoQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAbLTnN0TaBmPMZCMJVoSXhl8g2+8JKC6Qy/Zp2rvg7PxAAAAAQ==",
    "AAAABgAAAAELuiedzBL/UkWiGVYZ1CTpO5Bb7HWufqnCKwCZU1BypgAAABIAAAAAAAAAAAhQbSXL9kW9v0h7LVSPUHWaBrLC1zBHBDBGhlzE4JqYAAAAAQ==",
    "AAAABgAAAAELuiedzBL/UkWiGVYZ1CTpO5Bb7HWufqnCKwCZU1BypgAAABIAAAAAAAAAACjIWkBcDlzSUky+eBlyYfpvgJ97YR3I1YKYrV3PVO0uAAAAAQ==",
    "AAAABgAAAAELuiedzBL/UkWiGVYZ1CTpO5Bb7HWufqnCKwCZU1BypgAAABIAAAAAAAAAAFuWpF+VmC3+nLzPHZ2iHFUrFtSM6wtMrzbuDNiG1dwiAAAAAQ==",
    "AAAABgAAAAEMs36EcwsyEBiYVYFDh5lShj3O+usPAKuAktu0UBXH7wAAABAAAAABAAAABQAAAA8AAAALU3Rha2luZ0RhdGEAAAAAEgAAAAAAAAAAMhv0A5kX85BFHEqDZsqgFO4JaOrEj8Z6ijFFCiLvOW4AAAAFAAAAAGcx/PUAAAASAAAAAAAAAAASAz4kaUkRsyjrZYVINxUd7LtbHoLfK5viG4GJLF/zXgAAAAMAAAABAAAAAQ==",
    "AAAABgAAAAEPJQ3+9LAjYhnbaLNlhKSb3Pv0KHABpqJt6qrsn3qxHgAAABQAAAAB",
    "AAAABgAAAAEPeFqaOH/HoDPQaIfimbsNlJIUE1kFkzHjmNuwRD4aSgAAABQAAAAB",
    "AAAABgAAAAEX4kdTR4U4gx4Jb2bYH7Txel5wEegRIDTrvKZs6Sm9nwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAATUi+6UwccrqYv1vE63byouOAZ65sOUUn+4kkYmI1LE8AAAAAQ==",
    "AAAABgAAAAEZ4P8/VA+E2JkwAXnypkJzPpTcSp7wraE6Z9lEEVWVlQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAEagbCFgBRSCVXPzIReFp430L0BeF9LNZRkf1MFlariIgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAEbLBasQ/6a4JmHPbxpGqrJVqxpTyDczGEy3OMqkXztwAAAAA8AAAAGUHJvcElkAAAAAAAB",
    "AAAABgAAAAEbZh70r+wc6D/mmUIieskojz8+Un/IUrYr2ubB8PYuxQAAABQAAAAB",
    "AAAABgAAAAEd8Y0tMx2IPjgeOprnuCK5SAZMMsBLRFR04sHILDWkAAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARb3F/jbb6qeZLk7qv4OrymMzA/pZa5IK/C+wtwrCfKcAAAAAQ==",
    "AAAABgAAAAEdNloqayvTWlVzLCmJnc5KSBaSs1Ys3BpQLj5g3QcGhwAAABAAAAABAAAAAgAAAA8AAAALVXNlckRlcG9zaXQAAAAAEgAAAAAAAAAACzFGcZuMb6OoEzKM0vovLCvxX/ZCPDgNs4UnRB0jtQ0AAAAB",
    "AAAABgAAAAEdsBgMzWLDomvfiJ1XMLKxF9mQA8cB9wRxdmQX8+cpxAAAABAAAAABAAAAAgAAAA8AAAALUG9vbEJhbGFuY2UAAAAAEgAAAAEgXqmuKg0Ua42EYmo8fPQ51hmXyyM4FvLXccbmrXz3wwAAAAE=",
    "AAAABgAAAAEltPzYWa7C+mNIQ4xImzw8EMmLbSG+T9PLMMtolT75dwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAQ8lDf70sCNiGdtos2WEpJvc+/QocAGmom3qquyferEeAAAAAQ==",
    "AAAABgAAAAEltPzYWa7C+mNIQ4xImzw8EMmLbSG+T9PLMMtolT75dwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAQgsa5ri+evGybG9HF92wqjLu6lyy7nL7mPgOnW7Pci2AAAAAQ==",
    "AAAABgAAAAEltPzYWa7C+mNIQ4xImzw8EMmLbSG+T9PLMMtolT75dwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARb3F/jbb6qeZLk7qv4OrymMzA/pZa5IK/C+wtwrCfKcAAAAAQ==",
    "AAAABgAAAAEltPzYWa7C+mNIQ4xImzw8EMmLbSG+T9PLMMtolT75dwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAASIagYSIpNLHPFZ//hkWeU8dh2BEvH3VicHg5ts6fhrVAAAAAQ==",
    "AAAABgAAAAEltPzYWa7C+mNIQ4xImzw8EMmLbSG+T9PLMMtolT75dwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAASW0/NhZrsL6Y0hDjEibPDwQyYttIb5P08swy2iVPvl3AAAAAQ==",
    "AAAABgAAAAEltPzYWa7C+mNIQ4xImzw8EMmLbSG+T9PLMMtolT75dwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAATUi+6UwccrqYv1vE63byouOAZ65sOUUn+4kkYmI1LE8AAAAAQ==",
    "AAAABgAAAAEltPzYWa7C+mNIQ4xImzw8EMmLbSG+T9PLMMtolT75dwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAXna/LUsNwRg99RrbqywCgzYq9h7lizQEYFyqTapbTEpAAAAAQ==",
    "AAAABgAAAAEltPzYWa7C+mNIQ4xImzw8EMmLbSG+T9PLMMtolT75dwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAZhbzF2zbPGS160soXEdHNkuXhPO77pae9NpZ7sasvq2AAAAAQ==",
    "AAAABgAAAAEltPzYWa7C+mNIQ4xImzw8EMmLbSG+T9PLMMtolT75dwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAb1ErTAsdhnMLT4C1Ge4fbnjt7kJu0iTvgd6fteQafdSAAAAAQ==",
    "AAAABgAAAAEltPzYWa7C+mNIQ4xImzw8EMmLbSG+T9PLMMtolT75dwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAdbAKN2ckg8Uz/rWLRVJjC3hwwwj3+LSJa0WMkGP2+OeAAAAAQ==",
    "AAAABgAAAAEltPzYWa7C+mNIQ4xImzw8EMmLbSG+T9PLMMtolT75dwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAf3fU9CCu1I8PASOBb2P2tDN49lQSKauT0O2ULvYQPEBAAAAAQ==",
    "AAAABgAAAAEltPzYWa7C+mNIQ4xImzw8EMmLbSG+T9PLMMtolT75dwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAfotlUSrBh9dmT9FMX89xFcsLUV5u6eFGXaKdNBIoXDyAAAAAQ==",
    "AAAABgAAAAEm3Dztdun9V/mtCegSQ7TkF0baCT9is2GAAwa3MN6LowAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAEohS9owZhIjjRvsSEu1QKQU3Ycwk9FM5LjU5ggGwgl5wAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARIPSVz2mAcgPMi/aQkjcp1fcbfJyVKdC7/eu1W+vqCWAAAAAQ==",
    "AAAABgAAAAEohS9owZhIjjRvsSEu1QKQU3Ycwk9FM5LjU5ggGwgl5wAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAATUi+6UwccrqYv1vE63byouOAZ65sOUUn+4kkYmI1LE8AAAAAQ==",
    "AAAABgAAAAEohS9owZhIjjRvsSEu1QKQU3Ycwk9FM5LjU5ggGwgl5wAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAU9ne/9IP6EYupPnZEmJf98Jz+2AUO9buIe1RIS96hu+AAAAAQ==",
    "AAAABgAAAAEohS9owZhIjjRvsSEu1QKQU3Ycwk9FM5LjU5ggGwgl5wAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAVmybBX3yrp8CZkwkUf1db21Kmd/G4YwkrxM/oUHUwRcAAAAAQ==",
    "AAAABgAAAAEohS9owZhIjjRvsSEu1QKQU3Ycwk9FM5LjU5ggGwgl5wAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAWiNeMGRs+or7gdUS+K5KE2Fdw2N6adMuQcO8xm84ra7AAAAAQ==",
    "AAAABgAAAAEohS9owZhIjjRvsSEu1QKQU3Ycwk9FM5LjU5ggGwgl5wAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAX69XMiDE31V3QkHj+OBL2LbhMDbewoRmDIKdLrxONhdAAAAAQ==",
    "AAAABgAAAAEohS9owZhIjjRvsSEu1QKQU3Ycwk9FM5LjU5ggGwgl5wAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAXDBtmRoRYJ0mHe5rIZxTofZPxt4Eu6/oZ4xalXY63fwAAAAAQ==",
    "AAAABgAAAAEohS9owZhIjjRvsSEu1QKQU3Ycwk9FM5LjU5ggGwgl5wAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAYCVv+s0ZchQLxo2kePeRBYwqsm3oddNHxf43bkycjBEAAAAAQ==",
    "AAAABgAAAAEohS9owZhIjjRvsSEu1QKQU3Ycwk9FM5LjU5ggGwgl5wAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAYWlUeN80BsHZgzYkPkKC1KrT3ag8XJao76UHllyivVjAAAAAQ==",
    "AAAABgAAAAEohS9owZhIjjRvsSEu1QKQU3Ycwk9FM5LjU5ggGwgl5wAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAZg/d1tE0Zv+0CWEYaSfKcfgO9WS7J9Uq1lK/BG48IsSAAAAAQ==",
    "AAAABgAAAAEohS9owZhIjjRvsSEu1QKQU3Ycwk9FM5LjU5ggGwgl5wAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAb1ErTAsdhnMLT4C1Ge4fbnjt7kJu0iTvgd6fteQafdSAAAAAQ==",
    "AAAABgAAAAEohS9owZhIjjRvsSEu1QKQU3Ycwk9FM5LjU5ggGwgl5wAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAbOs35WTzP3UBBUrNDKOjjInI+5eifFPWFPs5HhVoV6yAAAAAQ==",
    "AAAABgAAAAEohS9owZhIjjRvsSEu1QKQU3Ycwk9FM5LjU5ggGwgl5wAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAca5ucOOJoSTiny4FCL2eurJIxU3zE5b7DaoGG4CESfJAAAAAQ==",
    "AAAABgAAAAEohS9owZhIjjRvsSEu1QKQU3Ycwk9FM5LjU5ggGwgl5wAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAActbNW+5yAi1X4z9Dmp4cTpRebqr7n6aqft8fT7RUpr3AAAAAQ==",
    "AAAABgAAAAEohS9owZhIjjRvsSEu1QKQU3Ycwk9FM5LjU5ggGwgl5wAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAeMV3WG+KkapFBCmWk+2t4NubalgHkYanqop/i6+7rzlAAAAAQ==",
    "AAAABgAAAAEp+ceL7oUhYctz7vSn8/EYS8yE5dUT6BLGtkLgjKdtQgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAErB5un2IKpaHQ4Kwc1pEWjol1+qbphVy+0EyHDctYSRAAAABQAAAAB",
    "AAAABgAAAAEtL8EwRzMAZ0tIuwXaoqzzXq6EXlZkPAzvZ3mM94IXfgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAQgsa5ri+evGybG9HF92wqjLu6lyy7nL7mPgOnW7Pci2AAAAAQ==",
    "AAAABgAAAAEtnUnsQ7o7kCk5tu8O5LPE4CouxGdAn3WPhAd03gB8tQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAASIagYSIpNLHPFZ//hkWeU8dh2BEvH3VicHg5ts6fhrVAAAAAQ==",
    "AAAABgAAAAExTNQnU2Ob95yLiQj5+l8+j64N6CZCSAfwSj02R2pqQwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAExTNQnU2Ob95yLiQj5+l8+j64N6CZCSAfwSj02R2pqQwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAWAztCUOcE4xT7Bklz0YXbkiyuC9Jyulv/GarFcPEqwvAAAAAQ==",
    "AAAABgAAAAExTNQnU2Ob95yLiQj5+l8+j64N6CZCSAfwSj02R2pqQwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAWiNeMGRs+or7gdUS+K5KE2Fdw2N6adMuQcO8xm84ra7AAAAAQ==",
    "AAAABgAAAAF1Rhb9m0lGz8X1N0PlJVpnY4zwVuOW8ykpTN0MCv1gMAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAF1dhQ+CNByukUPUXON2K7kjaLsajK3jycXyNGK8gkDkAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARb3F/jbb6qeZLk7qv4OrymMzA/pZa5IK/C+wtwrCfKcAAAAAQ==",
    "AAAABgAAAAF1dhQ+CNByukUPUXON2K7kjaLsajK3jycXyNGK8gkDkAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAATUi+6UwccrqYv1vE63byouOAZ65sOUUn+4kkYmI1LE8AAAAAQ==",
    "AAAABgAAAAF1dhQ+CNByukUPUXON2K7kjaLsajK3jycXyNGK8gkDkAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAF1r2XExeYXj3AhgBmnElZqF+ngkRElm3ILJt6InIZpXAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAQ0J9KiC2YDkhEi2g4J4WVu82G35dJbXPs50ZO6WK+r+AAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAQ95t92pzQN5KfL+cqVqHGuKpiNYLdn/hgpIymanHuCYAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAQT1xeH/4P8QNl8VWoL003m1fPIOYS4Q+8lNBaIqsfxJAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAQg9JhFK01sTDoBpgVbspuDN2PrsotzR1S4TVbeaxGEvAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAQjUAZt4c4idbPG8BfwYMsrA0XkJWRhS+KmgbL8wp7POAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAQlVpt0Q/MvGNL1miu5cq32URyf9/TRCEgnvjNha9Z7zAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAQmktHGqMO9qa9JE0t0f9AKCLpxcY9IXut4rTIVQCxnlAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAQxhOn8VtLEj061rWmkWcbw/HjrgEXOyBSL5oghQm31sAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAR1uHaNTn+RbcoFT6516yBc5kuy/yx5sCWlIc4LyEm0IAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARCgNxKuXhxMCZRNbqXn3bkKJyJvRKdLCR4MDzxTtnbJAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARO3n7to4WAzEuQGpz6vhs8Xq8r1/crAK3xQO4brt2ppAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARZqoC1A8nsHr3EF4CKXOxtFlXSxA0XiE1WUJ91seRq/AAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARcmhRFRjxpLtXqE2E7kaiC68ugxuUalYP5aA5Ctw+hEAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAS3OkS3xxTH9gtGrD2DmeAYjp91dyTizotsmZ0qnvHhrAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAASBswdh6F/z4bGSjeidLhdEcnv4B2X0PhX+sAG4NOISwAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAASTpPHRqUnsLUInYuy3AvXwTTgs0Z2TOskw5cSvsNLUyAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAASbp25aqxTzW3Bg2ayratsUaoi7a6XSKCLIHc+0JX+Q6AAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAASuIwX5KwsdIX6XE8uNlfmeIPsKMFwO2z0hYt6zJcl+xAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAT3wfm9EU1lYhvgHXrnyRTWhP0LEjJsMllnczINwqxsmAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAT8vClJHTORsCxnNm+V5aElD/0faNClBMXkJ0knPPnIlAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAATDAd4Q0THpXx5UsxmAIgiGFu9bfO+9pm1zhvYbgO5ggAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAATI/SwX+jcv0O9L+2Sr2CY3e05yIPkBgWpyLuF2bLQMRAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAATKkmQOWjAMFYT2UGy/fDlRbsjV77KjlKd0HxnTwVQLMAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAATNAPVM6yc8irEMWfm6noE/S2FLbR22BapIOu62huJVJAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAATYdb3qNTV/ahSonJ3Ff5hd4Ui43b8a5ZL7rkuXX9k5RAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAATgvJFtZDyXR8xcmCpwRZPXC173CcYf9Xpy2yJPfchPSAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAATj+P2dCSwGx5E5aWngdv2U1v/99oRm7b+tRQ5p+fQS4AAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAATv4SfltNSwIYYKPtqu6GgBFkD9nOJ25ceqrbcPFlJsEAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAU/77Qu/5425SxzUVa7JYze3Do3IHKYWM29WPOmrs8olAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAU2iU9pBUlvyNBwpmQt8aLIOed9+XuUQYwLCDh2uwpBFAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAU3pvI5uK9nSjHuCATK48ElGxm9Oqcpt6PpAYnWdM/G3AAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUaf7xK73aR6q8trKkJjPCKmL0lAoehtJjzbQe4W9G+pAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUbNHqIDK7sCI6Km7uRFehFpAizCvJ36C/U2MMFW/thAAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUpC9pMkubQeZySD24R57KdQdTrWtiW23lJioDg8bubSAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUyuebl4ulhPQwqtnR9Kvr5ggsffmP4ypBDjOTjSf64FAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAV5/6dfpZVy773I8Bxb5+t9KPExIfQum3WSo8ncA66W3AAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAVFwaegUJRYu1HHxBLq9bSevP1fp8reKx4RrM2Eh10v/AAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAVIWj6k/hUhMrAGrTwdaNkm8mYIWMwTuw9FBFbtU1gnHAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAVNNZ/uPaMeTF/qYNw5SuKcH0RE8+CPbDPUyCPL6PRzIAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAVSBHZ96PZIFHeV5aUd0k/grUQalR/PK1ib1KFn2v4TnAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAVcPfa/UTl/q9o5iZjh/d1h8jeQoSuzFJl4cMvWf0hRiAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAVhl51kZEluihHcXusHdcqXBLxuosXjkBitIgZUDfbNdAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAViS2Bnx5v5/PjRr+eM2crZfnV0EzUTGqLqKd9sjJ8/XAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAVp1mj5bRq/ZJXrZbqUtjRe0ggmVOH+b6EaRYLBxX8O/AAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAVu8dUANyF1Ubvna2fNzvJq9qtNItHhjhG1rGUblSkJWAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAW8Y/u0vSVMxvxBwvsNTM45bWaAwLwRFHnYqvUqOYRYCAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAWN7PKmVULsoC7AuBCPLPwkxia1C4g226mEhRm4hIY3YAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAWpD2+ue7Q0FXVuU/y/yKRbv13O2EBi27MVfgQeW8fbRAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAWzJo2yeAQoMUEbwzP1kgyYfIWt1Q92zkFrr8QmbaArCAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAXEpdtXzFC9n1vQHRDuyzoWzvp1KAmQz1gI2u/z1DeMWAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAXNFq6Thgqr2l02wm+cT5hQ3v7Y1ygbQDcKK6Omt9zi6AAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAXSVVjW8vjF/gBsK0YrJGyAWcRRiOX44W4mXh4cTUpGeAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAXlu0rPNWiE0YfUJVqKW6VPQuW2HAEXfdgMGK/VcZpe/AAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAXnvLVOkU3tKqImbp6/tc25WxJpBVCSsc6SLthpLh5fQAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAXxB/yCNu+rsCkDZz0iqsDMkfNsLJeifQ49lsx/ikEZEAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAY03Qw2GCymvJwUPt1lW7ifDJeJQBJm/bpTqv6bHQvlqAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAY0ovyn4Ys3BiU9zp5m6iqlYWP1YYc1hG6SNcPiAM9yjAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAY7fDslD/4KnFKAYLAbAAns19rdibXr+KHQa+WBZuiJXAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAYC2Ev6xZcwUzCsJygzWz/TaMBz8z+yjN8a+Xig13ox/AAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAYCJExXV/q0Uk2s6vbrAr1WrCfU5pbuxeC7LPc4DcflUAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAYFRqV+lTG6MyxDelersg/J3l3QmkWfvc+qTlUfYIGo+AAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAYL4qMjrZz8HMmMzE384tIhcJ9/OREk5OTk0vamJ3TA2AAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAYQt8ear0QqMXhpeo8L2rUDzqZnQ0hg+31Nmfw9xYHjUAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAYVYNkLSFbBXroUag6wt78UAKOn7sGLRkat4FhJuMLDCAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAYVdzOACAmVQrR3loD9ljZHX7NRslYbb7y8E1WA1nLFlAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAYb0wM3aMJQr46kcjijm9fQeHqlkWVdqKPLQUFmwtQLZAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAZDsVOqGVyFl0f64waGIW/m85WAkgNvy2qFSHGRK5ngdAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAZEsMYQS3mI4OfLhZ8I+vEAr925lERHKyy6KpgglpROWAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAZZqVtRm1jt8eamE/jOs0F5Te/Te4uDcf17fe6t1RkfIAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAZaN1slh9GJaG3EStWcN0TpvTxfnsVr7qdQC7qGD56mLAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAZpdyzuJKcNrIgMLs0lvgIW2lABXPcJuxm6NN6h8713JAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAZqmYikXJ4R1Jl5QYJelv5xLaJIboiZbq3DNnKUdYdMkAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAZv78JUmD+snqprtraO16gjMji6GdmtiTzxLCBla35HfAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAaFddQ3xpfcfcxRieMDgv0Pm1bODR+4LNUcI69CtBq6TAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAaWyOla+0RhkIajOG8BnGMaxMJprPc4psmCpDUfBdMWzAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAapWVOIvUOPfg3SEl8g1kdk2+A1cEjkyJckJfq0k2sW6AAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAauy9udc5B9arAQXm9sYHox6X+rbctQeHv+TYQwQTS9kAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAb50GOzKJsnNvIPJJYCYF4miuRdLkfifvbdD77GqnFyJAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAb5617agEjRKTnPyAb2kUkQiGvLatzGPY0R6XBOktwC/AAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAb58D1+bZ0RDAJdPWCRVOraoRxVAvEYqVqqMrm4rwQmZAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAb9zeB/f/nrjvqcPPcl9dMLYRZVl5KIZ+2HInIQfNEwoAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAbBbgUGyjL1QqjqCDOnsd8EfEH5cE1rX0ALqbRbNYR7yAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAbDJhCFZL3EbQ90XU+DJuHqSGlQAe/fIrFLTBAkgvImgAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAbG8H5zyxw0L2f2+m3QMIjQ0YrTOox3ceiadh2vC/oRVAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAbL6B2cZ465+2PsCmQRHfaCAt97sEpxni3qxqy88xp3JAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAbS/a5yudTSSWNFQRy2/NLis3vPJbgU9LaQEQxnh9V87AAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAbd+9GNiu4yzpgF0a0ov5cT4FkEKU/1eDvDXX6IkGjtIAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAbh9KfDB41bmOG8u6WlYvCxW9b3skJl5aoRfjavrFRbSAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAbpdtYHxFO7I3vCFETLSWLD+pHmMg3tV8Ge0TI7iiBtXAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAbs882RU/UPPbesZEMQi2rBXabAamkKuJSsCGhza3/YeAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAbxXcUUDvXcnsRJmv1cWP0S2ed/i6fZZ2a7XpHP/ZntEAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAbzkboHzC/BtLdAGdINejyQZt7+mLPdl1YJl3EhNxvzyAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAc+DB04iYrNDHU7dSYs12pyCr2XlMwx9UeHch9XlGmVHAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAc0fgVGFQAXXbJEMJSUAnMGo76vJzlyahGfCnU/QrLQqAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAc4SXY1ZWWQ1kpK73WmhQqRXQ+cDfQOQWKZkOWfZTsyJAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAcAq6o5DMJst5akBZ/jZehnu+qLJkgFum9o0WYg4s/sdAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAcFT6oRDUazb/47cpxNmFE9kuIo7ylyY6mx1drCDhTw8AAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAcMyFV4W+gaRg0fv/swrc8dLGFOuQEDQffJxvR12/t6KAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAcUJrZZ+izKu0Z+4OLm4xc6DeRbzuEL1W8IuvJd5BLcCAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAceIUpMiR66Mb0Hms8jWBVP7PqjLoo9xmehs+Dqhw/0jAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAcfMmehthu2MoYXJ1sVs8psoP1bM3C1i0DW+LAYdoHywAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAcjJeTdaTTl61kP4Nz6wu3geJVB45uvnmRKWfMd1GDRqAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAcn4VdVAKXZaJPZ+hU+D2+MWTtPH7mdUfh7fT6O9YrV8AAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAd+465h95vi5u47UIjwAnjqZkkTrJLG8NRgsrnoL9ySUAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAdTktt4NjhJQF1O6DMYOrY+mTCKVuJblR5RIdxbB1ZDUAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAdXCDHBJnup/96QSEOx4oFVe9YkyrIxGUy6CQtXVJ8CSAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAdZHebppstO4WLyvLhhT4l113UAKhispScIbUAlAbYIRAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAdhpORyuJ+16TD3AJrYJfOYn/312eh6URdJeU3ngiiZuAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAdmBTAuV2qfIOKoyZQMKe67zkW8dHiU0cKSJCcgoXiDvAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAdqqMzHXhUBmzIelPXb2VmM4CBLeVX/611hGUDinMiV9AAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAdt5smCvHIFv5KoTjWhhORe1H7ZKdYy2//JbddVzcLrtAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAdyuoIaoWVhcxAa2ndQk1ekGcJZQkRZxdYSPE3Etjy24AAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAe1ipfkI8CiZ7CJzFxC1hih8svnujNQ1qn6CuV9UKz6MAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAe6zsKeY6dfGNXZwliQB+BPSdghS+tryrM8DZY8RNOKXAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAek0pytfGHqX3o8FXInnQsPyl422uCN1inkTZtlPoKAAAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAel7+mNVjL+fq3pS/y+6TVEJZXAKTks9hAiqwP9CWDuBAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAem9qOLA37bYmfPXcUBhB6CWFcuQun6oqhf7sErtB4UaAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAf1tXf8WrxepnmawxOXi9WdPs+q5aQkeIRwqshOSFTKTAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAf3cS0FVfovK1gQAsZClg9HY9kSwNoGEoYHP7+oudT+SAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAf6Bzikr+FVEMGGH/iLv1EdWTG/zgKq7DJYmUtvJLjJTAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAf6QChWHYrqqqK2gYE3PtPV5X6QaiSidF4Y8BxtgMl9VAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAfBDZyQ/E3iOXOGIEpPVpoKGPIa/O/bOBPlCAIUhVGhtAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAfJFE+4YmG+Z+Zg1gZK64nXBbmRUbgqTCoKi+9CEX6n0AAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAfRrSw6QV5XNsaQyvZxRmDelxtrEcIt2P0v5tJrSNHgSAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAfeGLv3/lbzAJl62EszgPDKZ8piFqkpxA4v2h1QgJ/uBAAAAAQ==",
    "AAAABgAAAAF1u0RwsaT/YezHKV6LjrdEGd1Ybu5ATN9SSZFdiQ4IdwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAfotCflR6lm3Bp2+c/lFFna5VCfqNqOdgvxstB1Z5GTdAAAAAQ==",
    "AAAABgAAAAF2kDxkQwG3OkBdDrxEzNQnc1R7ICQFvKypKae5a6LSGQAAABAAAAABAAAAAgAAAA8AAAADTWFwAAAAAAMAAAAOAAAAAQ==",
    "AAAABgAAAAFBaL085PZfPklTQr4qa9dOgnv82oQtE0sk0qX3f/p5uAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAT8YDYyvid2/pB5B0z7BzvYGW1lruautGomigD+QugEaAAAAAQ==",
    "AAAABgAAAAFBaL085PZfPklTQr4qa9dOgnv82oQtE0sk0qX3f/p5uAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAYWlUeN80BsHZgzYkPkKC1KrT3ag8XJao76UHllyivVjAAAAAQ==",
    "AAAABgAAAAFE73aOtfGjR94zhME3yKbxzs7ieHGyro1fAOoxwlVRWgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARb3F/jbb6qeZLk7qv4OrymMzA/pZa5IK/C+wtwrCfKcAAAAAQ==",
    "AAAABgAAAAFE73aOtfGjR94zhME3yKbxzs7ieHGyro1fAOoxwlVRWgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAATUi+6UwccrqYv1vE63byouOAZ65sOUUn+4kkYmI1LE8AAAAAQ==",
    "AAAABgAAAAFIzQgIwtmzhc+nTrgv9ehoBTNt/8eIKvwrTzguFKD1kgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAQbCkdT2MhTuM4hpyV1nVOcN6wPWKgCHBIqHZ/Z1KayiAAAAAQ==",
    "AAAABgAAAAFIzQgIwtmzhc+nTrgv9ehoBTNt/8eIKvwrTzguFKD1kgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARb3F/jbb6qeZLk7qv4OrymMzA/pZa5IK/C+wtwrCfKcAAAAAQ==",
    "AAAABgAAAAFIzQgIwtmzhc+nTrgv9ehoBTNt/8eIKvwrTzguFKD1kgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAdbAKN2ckg8Uz/rWLRVJjC3hwwwj3+LSJa0WMkGP2+OeAAAAAQ==",
    "AAAABgAAAAFPxnOzgFY33cry/1wphE2KiYXL9wLd2GBCBz4ttJ2nNwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARb3F/jbb6qeZLk7qv4OrymMzA/pZa5IK/C+wtwrCfKcAAAAAQ==",
    "AAAABgAAAAFWripE2LLYNlWqWD3VheAUXlzfxpIkGIL0O3AwzdWABQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAFWslvnHqNgTrJiwGszht2EeRxp10C38Gjy6Lr2dN9boQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARb3F/jbb6qeZLk7qv4OrymMzA/pZa5IK/C+wtwrCfKcAAAAAQ==",
    "AAAABgAAAAFWslvnHqNgTrJiwGszht2EeRxp10C38Gjy6Lr2dN9boQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAb1ErTAsdhnMLT4C1Ge4fbnjt7kJu0iTvgd6fteQafdSAAAAAQ==",
    "AAAABgAAAAFXXgJyRanviLKFNNrFSGwQqmdOHLIaJmnm6prGQZ5w5wAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAFXXgJyRanviLKFNNrFSGwQqmdOHLIaJmnm6prGQZ5w5wAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAdF5YHH8uuXPvks+buOrOfzSFQ3LiawbU0kuc+LKXXZRAAAAAQ==",
    "AAAABgAAAAFXuyYR3YsZgMPdZzzd78JzsfZNbRQvDoMZcKkU6sk12gAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAAAAAAAaYsOj3zKxYaiyvcsPH3AYlFP120Y8Xb4l6w1+hQP8zgAAAAE=",
    "AAAABgAAAAFXuyYR3YsZgMPdZzzd78JzsfZNbRQvDoMZcKkU6sk12gAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAAAAAABJQaKLOVdpHmRlQ5j5u5NDOYjz1CUU6r2SE7vMlVefjQAAAAE=",
    "AAAABgAAAAFXuyYR3YsZgMPdZzzd78JzsfZNbRQvDoMZcKkU6sk12gAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAAAAAADmDcDhPKiD+cO/z2Dj5v9yZ1jqaqBQlG+4wermeEoENQAAAAE=",
    "AAAABgAAAAFbtokyY6Exek8mFbBzjacrLaHqmCKVo3j/3H18lg436QAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARb3F/jbb6qeZLk7qv4OrymMzA/pZa5IK/C+wtwrCfKcAAAAAQ==",
    "AAAABgAAAAFbtokyY6Exek8mFbBzjacrLaHqmCKVo3j/3H18lg436QAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAATUi+6UwccrqYv1vE63byouOAZ65sOUUn+4kkYmI1LE8AAAAAQ==",
    "AAAABgAAAAFf9rvF+WIzycWAZ6XqlsIzp9P+SqscAhM21ZlBeAOUggAAABAAAAABAAAAAgAAAA8AAAAHUmVzRGF0YQAAAAASAAAAAean2et1IwBqRpqnSDrREHJHRDwNguYnY95nCEjE6XyQAAAAAQ==",
    "AAAABgAAAAFhKhe/di/IoYLNfaGpvkldMinnRkEmJw6jhNOZptP3eAAAABQAAAAB",
    "AAAABgAAAAFiZtjAFronrY4DI/sF7i9hMoOxxeB+DInivdNqBVzWywAAABIAAAAAAAAAABLKrZndhgit8mu47LG2t4SxHwgpldpcmJzIQbKOgal/AAAAAQ==",
    "AAAABgAAAAFiZtjAFronrY4DI/sF7i9hMoOxxeB+DInivdNqBVzWywAAABIAAAAAAAAAAEillywW5kquODYRFYMWncIr83S90I2ke9leuFjxMcg1AAAAAQ==",
    "AAAABgAAAAFiZtjAFronrY4DI/sF7i9hMoOxxeB+DInivdNqBVzWywAAABIAAAAAAAAAAFuWpF+VmC3+nLzPHZ2iHFUrFtSM6wtMrzbuDNiG1dwiAAAAAQ==",
    "AAAABgAAAAFiZtjAFronrY4DI/sF7i9hMoOxxeB+DInivdNqBVzWywAAABIAAAAAAAAAAMQl7ysIT/8evPJmGI9vDQls4hD+YUyByOKSkNI6PbOvAAAAAQ==",
    "AAAABgAAAAFiZtjAFronrY4DI/sF7i9hMoOxxeB+DInivdNqBVzWywAAABIAAAAAAAAAAMV28uOImuYvHNTJRDOpRTFSnRcnNt2K2NKu0d8/sV0JAAAAAQ==",
    "AAAABgAAAAFiZtjAFronrY4DI/sF7i9hMoOxxeB+DInivdNqBVzWywAAABIAAAAAAAAAAMaIf/CNdLAraNK9Kof1NMbp8tGdJ3dfUwAlq1aFHM6FAAAAAQ==",
    "AAAABgAAAAFiZtjAFronrY4DI/sF7i9hMoOxxeB+DInivdNqBVzWywAAABIAAAAAAAAAAMro05+6gBmxGJNBviukis3kVL4nBxxkPwAlGgxd9/llAAAAAQ==",
    "AAAABgAAAAFiZtjAFronrY4DI/sF7i9hMoOxxeB+DInivdNqBVzWywAAABIAAAAAAAAAAOYNwOE8qIP5w7/PYOPm/3JnWOpqoFCUb7jB6uZ4SgQ1AAAAAQ==",
    "AAAABgAAAAFmKVchSUzLfJpaiqiigI0VlWhzDQX79g+CV3YA/NDDsAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAAAAAACjCZpS3TkDudfi/mTYVy7CoUYoEPFqMFYxwlV39K3fvQAAAAE=",
    "AAAABgAAAAFqOM+8/xwaEuXrEh3Q0OiN8SjCAfrORr1oRDTQOeuudAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARb3F/jbb6qeZLk7qv4OrymMzA/pZa5IK/C+wtwrCfKcAAAAAQ==",
    "AAAABgAAAAFqOM+8/xwaEuXrEh3Q0OiN8SjCAfrORr1oRDTQOeuudAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAATUi+6UwccrqYv1vE63byouOAZ65sOUUn+4kkYmI1LE8AAAAAQ==",
    "AAAABgAAAAFqOM+8/xwaEuXrEh3Q0OiN8SjCAfrORr1oRDTQOeuudAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAFqOM+8/xwaEuXrEh3Q0OiN8SjCAfrORr1oRDTQOeuudAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAbSQXz73t4tSXCTvmujTIwCRZLNWZAPUAT9jQxoqwISgAAAAAQ==",
    "AAAABgAAAAFuT1ed4SmLVgJHJik43BSa+Ggrw6agKvgp3bU2t+CvgQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAWz9f6FplnsWcKh9A4PfYu/7Tv7GerbKlXK/bU2Ktf7nAAAAAQ==",
    "AAAABgAAAAFy+vrrPL5IO7SvgiDzOzKD4e/0l9lrd7iGWNsFA4RKoQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAY5D9ySqhgJOhBlPd1bN3VL0IpJGy5XMSSz4mF8PIGRvAAAAAQ==",
    "AAAABgAAAAFy+vrrPL5IO7SvgiDzOzKD4e/0l9lrd7iGWNsFA4RKoQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAb9D3mA1RTNrDKOSTnV4KcS7wcJNuiG7Jpt7JVbQbl6FAAAAAQ==",
    "AAAABgAAAAFy+vrrPL5IO7SvgiDzOzKD4e/0l9lrd7iGWNsFA4RKoQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAbcx5zd/OMTJmm6+5XW4YY5RS5cUY0XvWhjM9uC/AhbzAAAAAQ==",
    "AAAABgAAAAFysviHFnnKdxjIuGKGy3it87rDvlEiVE04D/+CEhWdggAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAFysviHFnnKdxjIuGKGy3it87rDvlEiVE04D/+CEhWdggAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAWz9f6FplnsWcKh9A4PfYu/7Tv7GerbKlXK/bU2Ktf7nAAAAAQ==",
    "AAAABgAAAAFz9nQ7xy1g57dXaZEAriZ1tUpZvggsX2i7PE0ly4C7oQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARb3F/jbb6qeZLk7qv4OrymMzA/pZa5IK/C+wtwrCfKcAAAAAQ==",
    "AAAABgAAAAFzWTah70DS65CqV6V2AluAH10TNM18EAXzXzvhRE0xBwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAATUi+6UwccrqYv1vE63byouOAZ65sOUUn+4kkYmI1LE8AAAAAQ==",
    "AAAABgAAAAFzWTah70DS65CqV6V2AluAH10TNM18EAXzXzvhRE0xBwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUfQ6rfBIUrCQG0IQTpnpQHV2LZpOXEXbuy+gXjm79XGAAAAAQ==",
    "AAAABgAAAAG+2Xmhristv65weqJjgGguoFwjUiYAmJsEiHp3AGsAiwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAWAztCUOcE4xT7Bklz0YXbkiyuC9Jyulv/GarFcPEqwvAAAAAQ==",
    "AAAABgAAAAG+2Xmhristv65weqJjgGguoFwjUiYAmJsEiHp3AGsAiwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAX3kZJdLFBBRI0QY0wZQCe6qDeFDyIbkjqMcRQtNUyRaAAAAAQ==",
    "AAAABgAAAAG/Q95gNUUzawyjkk51eCnEu8HCTbohuyabeyVW0G5ehQAAABQAAAAB",
    "AAAABgAAAAG0kF8+97eLUlwk75ro0yMAkWSzVmQD1AE/Y0MaKsCEoAAAABAAAAABAAAAAgAAAA8AAAABTQAAAAAAAAMAAA+lAAAAAQ==",
    "AAAABgAAAAG0kF8+97eLUlwk75ro0yMAkWSzVmQD1AE/Y0MaKsCEoAAAABAAAAABAAAAAgAAAA8AAAABTQAAAAAAAAMAAA/WAAAAAQ==",
    "AAAABgAAAAG0kF8+97eLUlwk75ro0yMAkWSzVmQD1AE/Y0MaKsCEoAAAABAAAAABAAAAAgAAAA8AAAABTQAAAAAAAAMAAAAQAAAAAQ==",
    "AAAABgAAAAG7yHyYCx7iK/m/AKN/0rj2/a4H3rrj2U9g6YB9m7nyuwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARIPSVz2mAcgPMi/aQkjcp1fcbfJyVKdC7/eu1W+vqCWAAAAAQ==",
    "AAAABgAAAAG7yHyYCx7iK/m/AKN/0rj2/a4H3rrj2U9g6YB9m7nyuwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAG7yHyYCx7iK/m/AKN/0rj2/a4H3rrj2U9g6YB9m7nyuwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAWAztCUOcE4xT7Bklz0YXbkiyuC9Jyulv/GarFcPEqwvAAAAAQ==",
    "AAAABgAAAAG7yHyYCx7iK/m/AKN/0rj2/a4H3rrj2U9g6YB9m7nyuwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAZ8dQ2XU3uqp6pgOZbGWevsQtDgdjGo0OH/VX9tc6gCbAAAAAQ==",
    "AAAABgAAAAG9HiaVOEuam6atnH5Cdi1i+pSYVZqyHHjOit6YrXdYPQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAG9X0052iAemcuD4iUOhm5hsOulyUWSeQWLKmgrTnLbcwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAG9X0052iAemcuD4iUOhm5hsOulyUWSeQWLKmgrTnLbcwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAWz9f6FplnsWcKh9A4PfYu/7Tv7GerbKlXK/bU2Ktf7nAAAAAQ==",
    "AAAABgAAAAGOG1MVtyALw0qqpCvPf5WXBwpgwbUIwGxYM3qlL6O1kAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAGOO8I9MOAdiIEcvYjkNpl5UxCOZB+ylvS8ZGdN4A1JcgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAGOO8I9MOAdiIEcvYjkNpl5UxCOZB+ylvS8ZGdN4A1JcgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAWAztCUOcE4xT7Bklz0YXbkiyuC9Jyulv/GarFcPEqwvAAAAAQ==",
    "AAAABgAAAAGOO8I9MOAdiIEcvYjkNpl5UxCOZB+ylvS8ZGdN4A1JcgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAYCVv+s0ZchQLxo2kePeRBYwqsm3oddNHxf43bkycjBEAAAAAQ==",
    "AAAABgAAAAGOScPyxlCm77PMC+M9rS/OfiADwoiBEB1zlE7bL4KtMAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAWz9f6FplnsWcKh9A4PfYu/7Tv7GerbKlXK/bU2Ktf7nAAAAAQ==",
    "AAAABgAAAAGRz8oMqxaR20nPNf08/0TZXH75eF2ufmyTwwgXjM5tWQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAGUJQnnxW8B8aQQSpmWQqaAySTCabjvK4msSaCt8f2aMAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAATUi+6UwccrqYv1vE63byouOAZ65sOUUn+4kkYmI1LE8AAAAAQ==",
    "AAAABgAAAAGUJQnnxW8B8aQQSpmWQqaAySTCabjvK4msSaCt8f2aMAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAX3kZJdLFBBRI0QY0wZQCe6qDeFDyIbkjqMcRQtNUyRaAAAAAQ==",
    "AAAABgAAAAGbpZr1/Ta1xg0FzPh+6tJnp5mUK5Y8zksolNpcm4VwQQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAQ8lDf70sCNiGdtos2WEpJvc+/QocAGmom3qquyferEeAAAAAQ==",
    "AAAABgAAAAGbpZr1/Ta1xg0FzPh+6tJnp5mUK5Y8zksolNpcm4VwQQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAQbCkdT2MhTuM4hpyV1nVOcN6wPWKgCHBIqHZ/Z1KayiAAAAAQ==",
    "AAAABgAAAAGbpZr1/Ta1xg0FzPh+6tJnp5mUK5Y8zksolNpcm4VwQQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARb3F/jbb6qeZLk7qv4OrymMzA/pZa5IK/C+wtwrCfKcAAAAAQ==",
    "AAAABgAAAAGcHfQE9RMHkoKScYvzTQEPAeinjCUMGWkFkr/KZiS+FgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAGnzOEYzudHaBaBSOKYOfHg/ZrdmDfxK+KOaliO+JnniwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAAAAAAC+J110jTGuprTwO1/svca2IMjqMYaKd+Xq0yAi3LimiQAAAAE=",
    "AAAABgAAAAGo3kb07VozyLyXIqrzKcMvrFlOP5fAKIqrajh8+OwQBwAAABAAAAABAAAAAgAAAA8AAAAFVmF1bHQAAAAAAAAQAAAAAQAAAAIAAAASAAAAAAAAAAAR3AW1ZoOpR23Y0wu8dv9/aRl7ar/3QOlAaR759jOPYQAAAA8AAAADVVNEAAAAAAE=",
    "AAAABgAAAAGo3kb07VozyLyXIqrzKcMvrFlOP5fAKIqrajh8+OwQBwAAABAAAAABAAAAAgAAAA8AAAAFVmF1bHQAAAAAAAAQAAAAAQAAAAIAAAASAAAAAAAAAAC+mrr5TI+NmOq1E2UimLETyOQBlGGYdSHJBdhSeA0PVgAAAA8AAAADVVNEAAAAAAE=",
    "AAAABgAAAAGo3kb07VozyLyXIqrzKcMvrFlOP5fAKIqrajh8+OwQBwAAABAAAAABAAAAAgAAAA8AAAAFVmF1bHQAAAAAAAAQAAAAAQAAAAIAAAASAAAAAAAAAADBBfRrIHzKf+HMHpqg4js5QhkAVsGEE7S4co14BrGIYQAAAA8AAAADVVNEAAAAAAE=",
    "AAAABgAAAAGo3kb07VozyLyXIqrzKcMvrFlOP5fAKIqrajh8+OwQBwAAABAAAAABAAAAAgAAAA8AAAAFVmF1bHQAAAAAAAAQAAAAAQAAAAIAAAASAAAAAAAAAADCq4nAQSPCLVSR9OYLOG7uWrM8oyyx2Bb7pICMTvprSQAAAA8AAAADVVNEAAAAAAE=",
    "AAAABgAAAAGo3kb07VozyLyXIqrzKcMvrFlOP5fAKIqrajh8+OwQBwAAABAAAAABAAAAAgAAAA8AAAAFVmF1bHQAAAAAAAAQAAAAAQAAAAIAAAASAAAAAAAAAADrnl8YVSJfOJ8EIPNTFP85RZkJArIyEmfWGDAEuYCltwAAAA8AAAADVVNEAAAAAAE=",
    "AAAABgAAAAGt785ZruUpaPdgYdSUwlJbdWWfpClqZfSZ7ynlZHfklgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAQ94Wpo4f8egM9Boh+KZuw2UkhQTWQWTMeOY27BEPhpKAAAAAQ==",
    "AAAABgAAAAGt785ZruUpaPdgYdSUwlJbdWWfpClqZfSZ7ynlZHfklgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARb3F/jbb6qeZLk7qv4OrymMzA/pZa5IK/C+wtwrCfKcAAAAAQ==",
    "AAAABgAAAAGt785ZruUpaPdgYdSUwlJbdWWfpClqZfSZ7ynlZHfklgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAATUi+6UwccrqYv1vE63byouOAZ65sOUUn+4kkYmI1LE8AAAAAQ==",
    "AAAABgAAAAGt785ZruUpaPdgYdSUwlJbdWWfpClqZfSZ7ynlZHfklgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUrRIsbhyMNIAI8GSstDB9NoYP2UCZ9KP+HdkUn7S0UiAAAAAQ==",
    "AAAABgAAAAGt785ZruUpaPdgYdSUwlJbdWWfpClqZfSZ7ynlZHfklgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUwjVUeoOTN5hobvNxDkTdXB4W5U2R5SfH5K+cFLxfESAAAAAQ==",
    "AAAABgAAAAGt785ZruUpaPdgYdSUwlJbdWWfpClqZfSZ7ynlZHfklgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAb1ErTAsdhnMLT4C1Ge4fbnjt7kJu0iTvgd6fteQafdSAAAAAQ==",
    "AAAABgAAAAGt785ZruUpaPdgYdSUwlJbdWWfpClqZfSZ7ynlZHfklgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAbFG+MTezF6YOt3WAGPOI14TkYh5WwWP8u4xMBkrSvJGAAAAAQ==",
    "AAAABgAAAAGt785ZruUpaPdgYdSUwlJbdWWfpClqZfSZ7ynlZHfklgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAdF5YHH8uuXPvks+buOrOfzSFQ3LiawbU0kuc+LKXXZRAAAAAQ==",
    "AAAABgAAAAGt785ZruUpaPdgYdSUwlJbdWWfpClqZfSZ7ynlZHfklgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAenSDit0ZCefIwEqdrp/IyK7SMeIN2WK5TUbWuNaeslmAAAAAQ==",
    "AAAABgAAAAGyFhSKoucIevoC5dNJK1NnW5i33CpFT1Ro5Lz9uiFvowAAABQAAAAB",
    "AAAABgAAAAH11jazyNfMbuETxJua4J17ahzuszBS8wEhqdKJ5mYnUwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAR2wGAzNYsOia9+InVcwsrEX2ZADxwH3BHF2ZBfz5ynEAAAAAQ==",
    "AAAABgAAAAH11jazyNfMbuETxJua4J17ahzuszBS8wEhqdKJ5mYnUwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARssFqxD/prgmYc9vGkaqslWrGlPINzMYTLc4yqRfO3AAAAAAQ==",
    "AAAABgAAAAH11jazyNfMbuETxJua4J17ahzuszBS8wEhqdKJ5mYnUwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAXNBS36lY45kB0oVRxi5s5yvSflyMoBrqHP59/beCytAAAAAAQ==",
    "AAAABgAAAAH11jazyNfMbuETxJua4J17ahzuszBS8wEhqdKJ5mYnUwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAb1ErTAsdhnMLT4C1Ge4fbnjt7kJu0iTvgd6fteQafdSAAAAAQ==",
    "AAAABgAAAAH11jazyNfMbuETxJua4J17ahzuszBS8wEhqdKJ5mYnUwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAbFG+MTezF6YOt3WAGPOI14TkYh5WwWP8u4xMBkrSvJGAAAAAQ==",
    "AAAABgAAAAH7X+ehRhKcNA3kt6uboxzuxahCCk3pjo85URPxDv4gtQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAfotlUSrBh9dmT9FMX89xFcsLUV5u6eFGXaKdNBIoXDyAAAAAQ==",
    "AAAABgAAAAH8zkdb1oOBY0ttmf48gYAh7cgbHRK0bXzWu05molskIAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAHAcllJOFwYkQt44rEdBpvr3VKwzbAS1vDIHyzV7/Be4wAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAQyzfoRzCzIQGJhVgUOHmVKGPc766w8Aq4CS27RQFcfvAAAAAQ==",
    "AAAABgAAAAHBjr6zZE03AhuoCXRXojaMbvF1Ksmf0MmAKYKrGfC37wAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAHE3Q+OL1B3gPRBfRfU/u8Vby1TwrCtohRYQ2pEf18ENgAAABAAAAABAAAAAgAAAA8AAAAHRW50cmllcwAAAAAOAAAAO2JhZmtyZWlod3lpeWU1MnFwcmVucW1qYWhmeHBsYWx6a2VkcGRodW1vZmZodHdidnVkajRxanlndGNhAAAAAAE=",
    "AAAABgAAAAHGvxzNwasRQDv4xlmguGGnffgQYK6PU21wHaCHI2mUwwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAVJtxZtRVpggogJYJXflxvDoayNRAZIYGD+S4T8uaHCXAAAAAQ==",
    "AAAABgAAAAHGvxzNwasRQDv4xlmguGGnffgQYK6PU21wHaCHI2mUwwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAWAztCUOcE4xT7Bklz0YXbkiyuC9Jyulv/GarFcPEqwvAAAAAQ==",
    "AAAABgAAAAHGvxzNwasRQDv4xlmguGGnffgQYK6PU21wHaCHI2mUwwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAf3fU9CCu1I8PASOBb2P2tDN49lQSKauT0O2ULvYQPEBAAAAAQ==",
    "AAAABgAAAAHLmlZdw1d6fqRqnUGRxxJMqDa0DYf1Mb4n8xcp+HlXGgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARb3F/jbb6qeZLk7qv4OrymMzA/pZa5IK/C+wtwrCfKcAAAAAQ==",
    "AAAABgAAAAHOFABXkzqtNKIR4ITBo0vOZ9uOOjFbmEVlZ/e1dr440wAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARb3F/jbb6qeZLk7qv4OrymMzA/pZa5IK/C+wtwrCfKcAAAAAQ==",
    "AAAABgAAAAHOWXlFoNFvC9UEyhoTkxORFmerqaE28umLpMmRJFAUkwAAAA0AAAABAQAAAAAAAAE=",
    "AAAABgAAAAHOWXlFoNFvC9UEyhoTkxORFmerqaE28umLpMmRJFAUkwAAAA4AAAAJMTMwNjNEN1E1AAAAAAAAAQ==",
    "AAAABgAAAAHQqkbHxLhSzj1ToK8wJcg0rZNesYMEefcOLZ5dDnpOMgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAHReWBx/Lrlz75LPm7jqzn80hUNy4msG1NJLnPiyl12UQAAABQAAAAB",
    "AAAABgAAAAHUtMUL+TTrHm+aDiBed0eeS5XS89JQFEMOLDnsO4I5ogAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAHV9vON4wdrYUaEzpa8uMf5j2yXIx4a48bYzhd0jXXRUAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAHWwCjdnJIPFM/61i0VSYwt4cMMI9/i0iWtFjJBj9vjngAAABQAAAAB",
    "AAAABgAAAAHcW3ztUumYrLmU+Et+uwV4lHUHZPwX3vLGkELnjSdnagAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARb3F/jbb6qeZLk7qv4OrymMzA/pZa5IK/C+wtwrCfKcAAAAAQ==",
    "AAAABgAAAAHcW3ztUumYrLmU+Et+uwV4lHUHZPwX3vLGkELnjSdnagAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAATUi+6UwccrqYv1vE63byouOAZ65sOUUn+4kkYmI1LE8AAAAAQ==",
    "AAAABgAAAAHcW3ztUumYrLmU+Et+uwV4lHUHZPwX3vLGkELnjSdnagAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUfQ6rfBIUrCQG0IQTpnpQHV2LZpOXEXbuy+gXjm79XGAAAAAQ==",
    "AAAABgAAAAHcW3ztUumYrLmU+Et+uwV4lHUHZPwX3vLGkELnjSdnagAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAb1ErTAsdhnMLT4C1Ge4fbnjt7kJu0iTvgd6fteQafdSAAAAAQ==",
    "AAAABgAAAAHcW3ztUumYrLmU+Et+uwV4lHUHZPwX3vLGkELnjSdnagAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAenSDit0ZCefIwEqdrp/IyK7SMeIN2WK5TUbWuNaeslmAAAAAQ==",
    "AAAABgAAAAHdeDmvaPfuq8w8dwDKtZi2xUecdFXpo0aF6XMYEuyaMAAAABIAAAAAAAAAAEillywW5kquODYRFYMWncIr83S90I2ke9leuFjxMcg1AAAAAQ==",
    "AAAABgAAAAHdeDmvaPfuq8w8dwDKtZi2xUecdFXpo0aF6XMYEuyaMAAAABIAAAAAAAAAAFuWpF+VmC3+nLzPHZ2iHFUrFtSM6wtMrzbuDNiG1dwiAAAAAQ==",
    "AAAABgAAAAHdeDmvaPfuq8w8dwDKtZi2xUecdFXpo0aF6XMYEuyaMAAAABIAAAAAAAAAAMaIf/CNdLAraNK9Kof1NMbp8tGdJ3dfUwAlq1aFHM6FAAAAAQ==",
    "AAAABgAAAAHdeDmvaPfuq8w8dwDKtZi2xUecdFXpo0aF6XMYEuyaMAAAABIAAAAAAAAAAMro05+6gBmxGJNBviukis3kVL4nBxxkPwAlGgxd9/llAAAAAQ==",
    "AAAABgAAAAHdeDmvaPfuq8w8dwDKtZi2xUecdFXpo0aF6XMYEuyaMAAAABIAAAAAAAAAAOYNwOE8qIP5w7/PYOPm/3JnWOpqoFCUb7jB6uZ4SgQ1AAAAAQ==",
    "AAAABgAAAAHfcq6Pr0DmGtmcwT3vyvf1nq4SiQoQU3boJQObL+Xv1wAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAA+L5mgHrvC35EgkgjIQQRrsXf9c6j45HnStuTO2l/lSAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAA0SsMH82rQRisD/QGJt0tUdpqpZLabdEi3FMKHKYhQRAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAAMff+yV2CrmFvx/v3Ae4i3IWOH4wvUUsfcR5lvQjSlcAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAASIufqlz4OC03kK7HVF3wZ7j+gOyNKSftpPuW13tlCgAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAAX9M9pfHDGpUthRG5CE9IgrDBsPYt1hNMvQbejKXsY8AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAAXicT3kgWPD/mF4RLGF3fzNtP9fJNopmiDXd2QoUWFEAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAAfHiKbDUJLhX15RDazTBkn9xjgibjq3rDbnhlqy6c+oAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAAvQljl66eomKzH9TxZXKq95EJEhRPrDqf0H9G6i/9avAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAB4Fd86UaXMvTOeGcrO/fm0AgB5X6QNdr0XBsj7PUZy1AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAB5SVuqoQezgaowiYciLIZQT/+y6Jd/PqKWU0s8RAVO/AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAB7z4IL2FJwvcBh6s29HuV+9y+sQ79YOGqOhuXwyH9biAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAABAX/K4ReTRFQ8OwIIKUn2aV2MvYNtxsPgzgn0aaTVg7AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAABD8GStsRrp+uthpw3I0OTjHMzNk8ftUCkyaCMCkN+54AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAABIIhchRTUMMgGCHYqAAW//HIEQ+nEuCqyouyt3qh8snAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAABJSI30ujg1YPevZrluHxoyJQ3qY1NYq944zNRw9SjfuAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAABbMqu8AZKyR8ovKjSKsXDtB3sSH6hh/ZX8EYEWs15GIAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAABeSKkkFMpSb2P86UjzhIgjxakiGi+WG/4kHTIYDtTnbAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAABo+JFByxdIJ8fhaKetUb6Pj+fsU5/OCOhyBr8sVQtBlAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAABvKSFZFdGgyd1facS8a1vIe/HS7Zs50tXQoyq9Vdq4+AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAABx9BUm6emKK4o04DqsO/gmiXlEKntZZT7+eI72tHpnUAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAC20DxLPHcJpMoz+M3md+MI5gkQ4y8l6/QHwEVIb/mZYAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAACTJRLYsFjB4rsqFuw83L08Mz1dfhDOgbTsXln3gAig/AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAACkXdVlK9b5+kIJepNyQ7GNrcOlZGYgrqP66agAfeEI8AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAACxJ9+Q7bXnLEnvEn4vhiNted7Bw9RWt4rDwdtyWaxgxAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAACy+AR9tEivGlW+eImwEP3knCjH0YlBLHCRKG162FVGqAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAD3ReWDd1ufe7Xcoa0oBwQW/gs0BKE4OgTP991lp8itSAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAD8A1P8LgBgzbOJPHfSdOmngbQj+8tfiKmU2NNMHDLQSAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAADH7nQmkuxjkpk4q3VjHluEOno0kJ/4aiQBbBKov0ds1AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAADIqYnX/mzVO6yybXd1gc0YXNHffQLotN03yDiuPFYktAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAADOHnRQ7urKCueAMkRRi8pRlKIj1GAc8dfSI4FKoVm/jAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAADX8WR+pnYtrhTId2+BXqh+OECu3BEkYidRM/tssH3VjAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAADabw40jJgGWADF8D5q83EisjM8Y+kIUDg9+v7wIzr6lAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAADpyLRCggjcUzC2vD9uokA9yqMbnBpQjE6kpCMff6YUhAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAADxluaWpHmKDjSZpsRSFQwX+GraNEpoE065jTht43qSoAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAADyrGgsUDSVZ5btIBso0fXzQ8TjoCWE/GVqj0NVyQGwwAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAEBkx8UR+LrfOWUJ0oA4ogL0svGh69BzqOABnwZVkwEYAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAECF8poU2wqzYyOWAdMhYEOuitZ4zMq1f7UOb43Iu+87AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAEPzxstYRfI8qPrYT6lAicuonaU1oD0PNbiYZku02KWeAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAEVnip6oPZII3EmVxcRWxLCpmBuA/iSFJppE64FLQcg6AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAEVxKoo1wXCg0vX5CKFvUJiJFu1WzBcZGvEfQd2vpNc2AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAEXuaA6jvoaBIR/xvGM8jNb69hYMH/HFM96WSeX4X8ErAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAEZ2wyDOEdtjwNnQCnOxXgZn3JMf6gWZcCupcavhnVHEAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAEqLdMea1es+tib0BOwQ7mKXGCke1nblfakiNlICPL7UAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAEtz8FCZP6laNVFgTzy0xYa1rsqCalZgtJmU/Y2ZVAcpAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAEwjYhEfWEDJ7PvApRYksvt8rQOVyxyedfZfu01jcDRrAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAEz5aZfZyaWp32r861EjInHp8loegqRtiKEyu8XcBXpeAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAF+lyN5+ZWkfo+kxdLrgl7xE8XhDfWawTow13ASfOw+HAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAF6tUuSkzaa5dKvZJvoRiO0Bd6L2s2dqNRh5hDSA3irOAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAF8FwGfhELcLKm8KqCIrtQey8oCeFvreF22wUGHix1mpAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAFARDD3xI56BoMb7Zl69V29YMNywE22zhlOdBQ806OKRAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAFEMOrE9PtRUPqGO6IDyy2sD/OPF/wGdgrNBqHfpFrSUAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAFJAnan8KMAeJfhEQp9Ow6ET4QipUtrDlheZRYfFpfWPAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAFJSBI+pkJFtbIP7KfHleqT+NnCyaKZUkdTE+wtZeDkfAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAFW9vUJmxrUZbZPRh8gMY8i3xY9f6d/N1DU4Ir1DhE2xAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAFolpyTOYkEZP+2EFV5Rt1ON0Ri39c1AZ2w8xwMO9/OtAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAFzMamjPwVnLDY4pGeWjB/pTKWxVTVajU6nARMocWx/VAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAG54h2OpsF/kwpyrhYfP40Gl78fC7J/3Sq3bob6hOkS5AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAG6+lgQJ1vWdb1QWo578snulO3ufTBV0UlsH4RhhA+aMAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAG6hwu0ADgW69NO159ZmiPgJdQJ3Fp2dFJK7Zr2VdXUFAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAG6w8kCAmQ5Ui93IVKIt62sg66ngZF+rpnqWqVFWT5viAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAGDb5ZonB0Mm5NvRR8pZXLnrAQ4G0sawEFiBv+HmFsjeAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAGIuTFUBvbe+L/b/ML3x0R0A/v4F4rhgYilYCZ6+g4TSAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAGQapCJzCOwaVOih32v7TXmYJjke9yPWfjuT7j+y9Bx3AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAGSSBL3se+M3CMCxVfWkcGJOqJ9Krwa1dCho0FEE2nLmAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAGUbWrSilRQZRV7MuX0MhYd1GQHrN/vbw+S+6pupFsonAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAGVXuCJvCfYgfoCYbbFQG0QilZ/NaBvAVFPfBm7dkCf9AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAGWnWFWKpUUulZS13R0UnvE5GqBFGjQp9k5Wz6UqiwPaAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAGdSvaEXcOmO7GJy35/lvCCZkKeo2kvdtoo3BUvo1GR5AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAGeSO3mRR9g0bH6VYmhUCpAnfVqgeUzdcNd6WkBzzasTAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAGowt2G0IHLtd0305jitAmtJHlBiuJisL+GS5iAB8jmBAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAGyDux6dn7xiYicT/wSki+gvGtwAwu14MEP4Y1tE0PEcAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAGyFKFmZqKHx7rRxhscz7hQ/8F1wOVbDgzkYHpoxMphNAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAH0rFIA839WVZ+2fqMjiF5w4H7eWPFycvfBFDW/fLZOrAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAH6A1DTe53H5yPq23gtQTDPsFvsZLmvsbdZG0aOUo1dXAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAH8h6lrs4Yh+IQYSsWaR5z8QEqnGPC7r93hJkFgWYwExAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAHHjR3Q1se5GrRxxLPU6I6Oh6vngf52iWeRd3Cd27FDWAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAHKIbjCI2YNr6JzTWyX7iKDv48GH0OEWoj7eIS17zbcEAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAHKsuAgATrX82n4B8hUsldEgO3jqwwGdxi7RGfQKhtjlAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAHNhOy1bozKh8WaWxTigeNRQBwLJv8yqNpIGOIXDh6AEAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAHVOysgVs/UzlSHe5WPtHx+TOPl2qirNJeiI5rDjolU2AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAHbwYLI+7H2z943HRahTvjagIrqp2xe2TJvVMMSpv2CaAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAHmqeTI1lf4Tg3Y++VwVkvJJW3K6dZ2AHlZSgte6Qki2AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAHpPoExPXpnCFC67dhnoD/IYAf72gYuFu93tir3YsJFaAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAHucdBYbPdPOANkw7IEvQAhHUV9ScqjnVNeW48BGO5xeAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAIChLsO6JBzueqSGLsoNh8gAj1SHUxP2ClYQmpqiHGDsAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAIFRABYQ0xTb2wNW2cRCf+Yo/MndwzLDCjY1MOTkjqk9AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAILz01MjUYOyvq+YK8prA/5cp75W8z7VklyW79f+uVqUAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAIe2ow33Jp09mWnidEI+oYdpHD1s0jkqO8cBbWMeKbSDAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAIhmyvZlmNNuHhp3w7WkCX608E5eAEN1pRrZaEF7cb0pAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAIi8rEfQS0LBAcAY1kOmPB/RHxFdhVY1xcKsWMA0zX6UAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAIkg3ecARVrK9Kr0bJe7mBxVbsXJL+cusDMaNhLKnKBNAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAIlTMq02anP6W5KXBb4Srm73qI6anx/AzSkAt1twOwjVAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAImKHALSk1T/+maBGQpOaXmQ4o5y1HXKvEeBE/avXGo3AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAIqTCbLWns4yI9J1zPYqTmSf7HbZ4CF0AUNkvCLc1LZmAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAIyn/OJzruhtdPe8nYcwyZ9lqWK6+aFSXKE8mqjBoa2TAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAIysKCWPb+exM9v4Q9pacXK+W9uHOLUUX4v71G31JgezAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAJ2KC/vHokxTsmebzQ0ark4pERtht49FtXQjDm9YwAdnAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAJ5GtHDbwJzFPcL4zUOJdwVtb8FjDnoKblMgKjYuOxq3AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAJFdKU6Q4FwWY5dUbDAew62Irsa5kJ3GLlrjnfd/xO3PAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAJI8PhWhY/LGW/JzZatec005Z5i/3hb8B4ZCf0/qCEyQAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAJJf4brXpeJA92s5VnIJf5JooiqHdsrFLQQ8X2IPAsHnAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAJJvCdOMRvwKzlJenzxFWhr/VkDdHeb3B1zWSxJ5Y72VAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAJVTUJ6zkUg4l+EPJSL7JNj0NGLGstA8KGaEI6eZTOzuAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAJWvfbH8gLMg/IidVwIKBnlidk/DI9D904F6bT0D2hKtAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAJhUiRO62WwaXFLZAl7ZmteRSJLK513eLJfSYfbBKDfxAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAJjlVfs4FQx87BemKttni+mUtszhks2HTT63TPzf30dHAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAJtNIFJxTe2Qp0wxf+3s2PeuPQMCfKj3xuHsVLs21Yh6AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAJw18aGhzGs4/k60xpu+97DYYW7H3dQ1t0c+vKgYBcyuAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAJyhprCmJ8DXXaUiou23EyP7klLNzDc/KrLiaUmH5jDlAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAK77HZNaVYHUTkTKKdtkt1+2tdR5KwgtwxMDmQtcld9YAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAKFgP4fZi7zCNxZBAT6I+zaxxOytc0dFKYGiK5qkPuD3AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAKLVskXxIGW4Yf4ryCnBGIW77oGZG2dU3IZTgWCN9xYLAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAKMn86op6RehrNVZQkkpYueSdoFn+JnxiewDURkS7F5cAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAKXmnK1vlE+O/Y52Ji/pA6I+X3aRatSWdAVh9InM5cxbAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAKcvCIR6+8eauckmGg0Q9ItcbSHGdgqa72jXPJC/DG9XAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAKl979QhO/o8Tpmhygd/YtWHDZTJLjXEUFT/iNmFJ6NwAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAKr8CIZn4joQt8ENMJ5v6xIqK/1LQ/yxwPyozX+TsWd6AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAKzgHIqB8tdAmcl8Arhq0Xj1SSN6eKD/fjmXD1FTzqxZAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAL65mqu+/zDmiEzSgp9MTA4MviD583xwUlDqfsI5xwx1AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAL8gRNVBiIObKzw6VCCIrAe19jOAmz72Za5PQ8+gIPuzAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAALHNZ1HRy1kcLUxC+sMsHmWmBUJ5dhZKS6LOusbPx2spAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAALJIJ/xQ90RiaRQ6CzHlqcvHvo14uMphETpSXKKwlt71AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAALJhZV+WUIrlMRG8w8Ja10s3F0/oZ5bpGJKh3CkL+g0XAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAALJnfdqXze/zuQCkpFMTq1563Xotz9wbYmaf2vtrtgEqAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAALQC0m1GeoPPj9fu/cpsM0lhuQyo7Glbo+X0QKqigTU6AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAALRsn/fv+3Dw7oUei6dK+gvUVf8xDeUs4QSavQU/FMPfAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAALVgss4GcTRjvGIEEkBz9oU97XZNY60h79zAr9Z5KzE3AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAALeaRoELFoL2yu9iToMW7Y6TD94C0OgV0odzRAhH2XNOAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAALzu0tEIhNXCBbadYIN+8R9vWbMsVyeR3gGubRTdY1niAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAMP4ZwpfTFdGFuka4LpM6azC2Ck7Gy8CG9XWjjsv7f3jAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAMS6s/Ld6tF3oaGk6dHpsOdPNUIZ1Zw/4Tz3QxSw7xc7AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAMTHkzaog44J+En4dXMHYhnJ9hS/pUP1+nGfAx75+dL8AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAMgBxGXgCeIm6mvfDMBm2jtiiTREaC59Lo+2Bk5WBLl9AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAMphdGVleT1fKHBiQLEG5dRKG9MFRvXTindykVtYKQtmAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAMwOHRjPQ3a2XC/y+ubbGGu7+g5nI/2/WG5vjid2w1UZAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAN4axlMjjB7rZ8YrVegV8O6cVB2vKj02bSPCzrEc9tr9AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAN69yYedM/Mo5xi2/Jw6WcDqm9E5O9+pYywR+/qjZAzTAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAANJTFaeEgcMLha+8iQtblVVLzw1nBfI++3e3z1iHfX/3AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAANN2dg4BmVUtcR/povUqGvi+SPvnIVif+JQwgGwq2BsiAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAANXyh+mRULXU6iGQ+IOR3F8i7CLuH29g7/po1+pr84HIAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAANe1ZHLXB7KspSr3jWPBRQrrE8ZmXMf8hKIjlh+HleO0AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAANlYcCk6pKHc0Uxx7vWDPJOwsg3rOuo2nrzN7dlByakcAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAANnrmV1fUJTTKdTReF+K/wiSLQUkW3bQIVOCMXGxsSoRAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAO2ChSxVeP1WL6ghnBoWDiIAj6bGVbVK3TTmmV5IVe7YAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAO4w5eNvvOdydF4ZDI0OxdcNY/sDaJtLJaWIUVNshVfIAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAODzlqyslSEobjNN0bU8zho1nSKbqKGW400rmIGcERE5AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAOM2943OVpyCtf8J1+YA2xBCJiablyustrqYc0wK94A8AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAOQqVgqB7CTXZyvR3qdN/B2+bFs1s16GnFSD5KXPr0lMAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAOXiYxAaBYcXQXsn077nMcDL/NJN0kFoZkFqZClOhbE4AAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAOlxx97ySbkn3qn5FHWlQpT1tvxkU7ZCfXbZlgwGlM3OAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAOmfJBWKsO4w10jIE+OuaTI05pcVO4Ow9Bfx7N9fuDfZAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAOu6mursE7s87EdaOWYAC90BNtT+C48cMj1n7eX6yCDmAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAOxIqfSPCJ0Ig8iZxlnBtKqASnPO0a/556jzKEGahtiZAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAP/XqPtXNn9NDgzwjHY746PxdKWBtBFVZG2LZYtc9dILAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAP4ZrepyVPn2YI0/DThUhCykYES1Ct7VS12M+HslWxAxAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAPFWemc5+VrnNeimeIVp4zfi6cSQ1vA0cFXCzl06fAzTAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAPMgSlvXsaIW8HBLkkr26P+LdhNfqS2f2Fmmp1skqVssAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAPQ2UCkZD6pK/Wj395TcXR5Z4i8zFP1eKhM1U4kp2zmcAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAPWI9nlbt294P8zlRIoccX5AYxtj6ND4WqTkID3oOeUKAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAPa8nQ8yve1aRZSxcfp2qb/NkR/IREFMx8I030MC/M5EAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAPmeLBQ7HaRGr06GvIJIompEP59kXg6diG0dARu0U73WAAAAAQ==",
    "AAAABgAAAAHgLIGYhzTQHL2Kuj3spCmledk6fI+x95UBMNSQiVD0zwAAABAAAAABAAAAAgAAAA8AAAAEVXNlcgAAABIAAAAAAAAAAPqr1Sh0vrrBOPLgSCGdRSWiqda5bXBaFpTlW5BW/7XgAAAAAQ==",
    "AAAABgAAAAHlIak5AJl0E4LXZgqu1IWXFt5C1NbiznGVAOy5lOvubAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAWAztCUOcE4xT7Bklz0YXbkiyuC9Jyulv/GarFcPEqwvAAAAAQ==",
    "AAAABgAAAAHmp9nrdSMAakaap0g60RByR0Q8DYLmJ2PeZwhIxOl8kAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARb3F/jbb6qeZLk7qv4OrymMzA/pZa5IK/C+wtwrCfKcAAAAAQ==",
    "AAAABgAAAAHmp9nrdSMAakaap0g60RByR0Q8DYLmJ2PeZwhIxOl8kAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAATUi+6UwccrqYv1vE63byouOAZ65sOUUn+4kkYmI1LE8AAAAAQ==",
    "AAAABgAAAAHmp9nrdSMAakaap0g60RByR0Q8DYLmJ2PeZwhIxOl8kAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAV/2u8X5YjPJxYBnpeqWwjOn0/5KqxwCEzbVmUF4A5SCAAAAAQ==",
    "AAAABgAAAAHmp9nrdSMAakaap0g60RByR0Q8DYLmJ2PeZwhIxOl8kAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAb1ErTAsdhnMLT4C1Ge4fbnjt7kJu0iTvgd6fteQafdSAAAAAQ==",
    "AAAABgAAAAHmp9nrdSMAakaap0g60RByR0Q8DYLmJ2PeZwhIxOl8kAAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAboieZZEh3nti2w/HZaoWWpSIPsTrGPzpkqX4I9ZOX5fAAAAAQ==",
    "AAAABgAAAAHnLOq2q9bRTPUqv40pTsDPvTQZ6pj8oY/YU6sEFXn9KwAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAHph+6eOabg0bAerTXZrGgHZhGxcrOUHMSplIpvNBl5oQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAHrEtCEr59ClzRVL3dxhg2HI3PihEF5OxMojwI/EXXCjgAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAZhbzF2zbPGS160soXEdHNkuXhPO77pae9NpZ7sasvq2AAAAAQ==",
    "AAAABgAAAAHsZI+x38MEU1tYW0hdFudtLYkJemT9o4U3XYHfrMjm/QAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAUCFNAwgmy9YVm5rVqetz51TrVPXyqab6MtshEARWgv7AAAAAQ==",
    "AAAABgAAAAHwCL/6riMB0CYz5rFKOhTZKhZhsCvfOzN+E5bJCM4dPgAAABQAAAAB",
    "AAAABgAAAAHwRzqr9avExxzorwU4KSlA9zOqbAQhtZve1+izS+RdtQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAARb3F/jbb6qeZLk7qv4OrymMzA/pZa5IK/C+wtwrCfKcAAAAAQ==",
    "AAAABgAAAAHwRzqr9avExxzorwU4KSlA9zOqbAQhtZve1+izS+RdtQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAATUi+6UwccrqYv1vE63byouOAZ65sOUUn+4kkYmI1LE8AAAAAQ==",
    "AAAABgAAAAHwRzqr9avExxzorwU4KSlA9zOqbAQhtZve1+izS+RdtQAAABAAAAABAAAAAgAAAA8AAAAHQmFsYW5jZQAAAAASAAAAAbSQXz73t4tSXCTvmujTIwCRZLNWZAPUAT9jQxoqwISgAAAAAQ=="};
} // namespace

const uint64_t TransactionQueue::FEE_MULTIPLIER = 10;

std::array<const char*,
           static_cast<int>(TransactionQueue::AddResultCode::ADD_STATUS_COUNT)>
    TX_STATUS_STRING = std::array{"PENDING", "DUPLICATE", "ERROR",
                                  "TRY_AGAIN_LATER", "FILTERED"};

TransactionQueue::AddResult::AddResult(AddResultCode addCode)
    : code(addCode), txResult()
{
}

TransactionQueue::AddResult::AddResult(
    AddResultCode addCode, MutableTxResultPtr payload,
    xdr::xvector<DiagnosticEvent>&& diagnostics)
    : code(addCode)
    , txResult(std::move(payload))
    , mDiagnosticEvents(std::move(diagnostics))
{
    releaseAssert(txResult);
}

TransactionQueue::AddResult::AddResult(AddResultCode addCode,
                                       MutableTxResultPtr payload)
    : code(addCode), txResult(std::move(payload))
{
    releaseAssert(txResult);
}

TransactionQueue::AddResult::AddResult(AddResultCode addCode,
                                       TransactionFrameBase const& tx,
                                       TransactionResultCode txErrorCode)
    : code(addCode), txResult(tx.createTxErrorResult(txErrorCode))
{
}

TransactionQueue::AddResult::AddResult(
    AddResultCode addCode, TransactionFrameBase const& tx,
    TransactionResultCode txErrorCode,
    xdr::xvector<DiagnosticEvent>&& diagnostics)
    : code(addCode)
    , txResult(tx.createTxErrorResult(txErrorCode))
    , mDiagnosticEvents(std::move(diagnostics))
{
}

TransactionQueue::TransactionQueue(Application& app, uint32 pendingDepth,
                                   uint32 banDepth, uint32 poolLedgerMultiplier,
                                   bool isSoroban)
    : mApp(app)
    , mPendingDepth(pendingDepth)
    , mBannedTransactions(banDepth)
    , mBroadcastTimer(app)
{
    mTxQueueLimiter =
        std::make_unique<TxQueueLimiter>(poolLedgerMultiplier, app, isSoroban);

    auto const& filteredTypes =
        app.getConfig().EXCLUDE_TRANSACTIONS_CONTAINING_OPERATION_TYPE;
    mFilteredTypes.insert(filteredTypes.begin(), filteredTypes.end());
    mBroadcastSeed =
        rand_uniform<uint64>(0, std::numeric_limits<uint64>::max());
}

ClassicTransactionQueue::ClassicTransactionQueue(Application& app,
                                                 uint32 pendingDepth,
                                                 uint32 banDepth,
                                                 uint32 poolLedgerMultiplier)
    : TransactionQueue(app, pendingDepth, banDepth, poolLedgerMultiplier, false)
    // Arb tx damping is only relevant to classic txs
    , mArbTxSeenCounter(
          app.getMetrics().NewCounter({"herder", "arb-tx", "seen"}))
    , mArbTxDroppedCounter(
          app.getMetrics().NewCounter({"herder", "arb-tx", "dropped"}))
{
    std::vector<medida::Counter*> sizeByAge;
    for (uint32 i = 0; i < mPendingDepth; i++)
    {
        sizeByAge.emplace_back(&app.getMetrics().NewCounter(
            {"herder", "pending-txs", fmt::format(FMT_STRING("age{:d}"), i)}));
    }
    mQueueMetrics = std::make_unique<QueueMetrics>(
        sizeByAge,
        app.getMetrics().NewCounter({"herder", "pending-txs", "banned"}),
        app.getMetrics().NewCounter({"herder", "pending-txs", "sum"}),
        app.getMetrics().NewCounter({"herder", "pending-txs", "count"}),
        app.getMetrics().NewCounter({"herder", "pending-txs", "self-sum"}),
        app.getMetrics().NewCounter({"herder", "pending-txs", "self-count"}),
        app.getMetrics().NewCounter(
            {"herder", "pending-txs", "filtered-due-to-fp-keys"}));
    mBroadcastOpCarryover.resize(1,
                                 Resource::makeEmpty(NUM_CLASSIC_TX_RESOURCES));
}

bool
ClassicTransactionQueue::allowTxBroadcast(TimestampedTx const& tx)
{
    bool allowTx{true};

    int32_t const signedAllowance =
        mApp.getConfig().FLOOD_ARB_TX_BASE_ALLOWANCE;
    if (signedAllowance >= 0)
    {
        uint32_t const allowance = static_cast<uint32_t>(signedAllowance);

        // If arb tx damping is enabled, we only flood the first few arb txs
        // touching an asset pair in any given ledger, exponentially
        // reducing the odds of further arb ftx broadcast on a
        // per-asset-pair basis. This lets _some_ arbitrage occur (and
        // retains price-based competition among arbitrageurs earlier in the
        // queue) but avoids filling up ledgers with excessive (mostly
        // failed) arb attempts.
        auto arbPairs = findAllAssetPairsInvolvedInPaymentLoops(tx.mTx);
        if (!arbPairs.empty())
        {
            mArbTxSeenCounter.inc();
            uint32_t maxBroadcast{0};
            std::vector<
                UnorderedMap<AssetPair, uint32_t, AssetPairHash>::iterator>
                hashMapIters;

            // NB: it's essential to reserve() on the hashmap so that we
            // can store iterators to positions in it _as we emplace them_
            // in the loop that follows, without rehashing. Do not remove.
            mArbitrageFloodDamping.reserve(mArbitrageFloodDamping.size() +
                                           arbPairs.size());

            for (auto const& key : arbPairs)
            {
                auto pair = mArbitrageFloodDamping.emplace(key, 0);
                hashMapIters.emplace_back(pair.first);
                maxBroadcast = std::max(maxBroadcast, pair.first->second);
            }

            // Admit while no pair on the path has hit the allowance.
            allowTx = maxBroadcast < allowance;

            // If any pair is over the allowance, dampen transmission
            // randomly based on it.
            if (!allowTx)
            {
                std::geometric_distribution<uint32_t> dist(
                    mApp.getConfig().FLOOD_ARB_TX_DAMPING_FACTOR);
                uint32_t k = maxBroadcast - allowance;
                allowTx = dist(getGlobalRandomEngine()) >= k;
            }

            // If we've decided to admit a tx, bump all pairs on the path.
            if (allowTx)
            {
                for (auto i : hashMapIters)
                {
                    i->second++;
                }
            }
            else
            {
                mArbTxDroppedCounter.inc();
            }
        }
    }
    return allowTx;
}

TransactionQueue::~TransactionQueue()
{
    // empty destructor needed here due to the dependency on TxQueueLimiter
}

// returns true, if a transaction can be replaced by another
// `minFee` is set when returning false, and is the smallest _full_ fee
// that would allow replace by fee to succeed in this situation
// Note that replace-by-fee logic is done on _inclusion_ fee
static bool
canReplaceByFee(TransactionFrameBasePtr tx, TransactionFrameBasePtr oldTx,
                int64_t& minFee)
{
    int64_t newFee = tx->getInclusionFee();
    uint32_t newNumOps = std::max<uint32_t>(1, tx->getNumOperations());
    int64_t oldFee = oldTx->getInclusionFee();
    uint32_t oldNumOps = std::max<uint32_t>(1, oldTx->getNumOperations());

    // newFee / newNumOps >= FEE_MULTIPLIER * oldFee / oldNumOps
    // is equivalent to
    // newFee * oldNumOps >= FEE_MULTIPLIER * oldFee * newNumOps
    //
    // FEE_MULTIPLIER * oldTotalFee does not overflow uint128_t because fees
    // are bounded by INT64_MAX, while number of operations and
    // FEE_MULTIPLIER are small.
    uint128_t oldTotalFee = bigMultiply(oldFee, newNumOps);
    uint128_t minFeeN = oldTotalFee * TransactionQueue::FEE_MULTIPLIER;

    bool res = newFee >= 0 && bigMultiply(newFee, oldNumOps) >= minFeeN;
    if (!res)
    {
        if (!bigDivide128(minFee, minFeeN, int64_t(oldNumOps),
                          Rounding::ROUND_UP))
        {
            minFee = INT64_MAX;
        }
        else
        {
            // Add the potential flat component to the resulting min fee.
            minFee += tx->getFullFee() - tx->getInclusionFee();
        }
    }
    return res;
}

static bool
isDuplicateTx(TransactionFrameBasePtr oldTx, TransactionFrameBasePtr newTx)
{
    auto const& oldEnv = oldTx->getEnvelope();
    auto const& newEnv = newTx->getEnvelope();

    if (oldEnv.type() == newEnv.type())
    {
        return oldTx->getFullHash() == newTx->getFullHash();
    }
    else if (oldEnv.type() == ENVELOPE_TYPE_TX_FEE_BUMP)
    {
        std::shared_ptr<FeeBumpTransactionFrame const> feeBumpPtr{};
#ifdef BUILD_TESTS
        if (oldTx->isTestTx())
        {
            auto testFrame =
                std::static_pointer_cast<TransactionTestFrame const>(oldTx);
            feeBumpPtr =
                std::static_pointer_cast<FeeBumpTransactionFrame const>(
                    testFrame->getTxFramePtr());
        }
        else
#endif
            feeBumpPtr =
                std::static_pointer_cast<FeeBumpTransactionFrame const>(oldTx);
        return feeBumpPtr->getInnerFullHash() == newTx->getFullHash();
    }
    return false;
}

bool
TransactionQueue::sourceAccountPending(AccountID const& accountID) const
{
    return mAccountStates.find(accountID) != mAccountStates.end();
}

TransactionQueue::AddResult
TransactionQueue::canAdd(
    TransactionFrameBasePtr tx, AccountStates::iterator& stateIter,
    std::vector<std::pair<TransactionFrameBasePtr, bool>>& txsToEvict
#ifdef BUILD_TESTS
    ,
    bool isLoadgenTx
#endif
)
{
    ZoneScoped;
    if (isBanned(tx->getFullHash()))
    {
#ifdef BUILD_TESTS
        if (!mApp.getRunInOverlayOnlyMode())
#endif
        {
            return AddResult(
                TransactionQueue::AddResultCode::ADD_STATUS_TRY_AGAIN_LATER);
        }
    }
    if (isFiltered(tx))
    {
        return AddResult(TransactionQueue::AddResultCode::ADD_STATUS_FILTERED);
    }
    if (!tx->validateSorobanTxForFlooding(mKeysToFilter))
    {
        mQueueMetrics->mTxsFilteredDueToFootprintKeys.inc();
        return AddResult(TransactionQueue::AddResultCode::ADD_STATUS_FILTERED);
    }

    int64_t newFullFee = tx->getFullFee();
    if (newFullFee < 0 || tx->getInclusionFee() < 0)
    {
        return AddResult(TransactionQueue::AddResultCode::ADD_STATUS_ERROR, *tx,
                         txMALFORMED);
    }

    stateIter = mAccountStates.find(tx->getSourceID());
    TransactionFrameBasePtr currentTx;
    auto ledgerVersion = mApp.getLedgerManager()
                             .getLastClosedLedgerHeader()
                             .header.ledgerVersion;
    auto diagnosticEvents =
        DiagnosticEventManager::createForValidation(mApp.getConfig());

    if (stateIter != mAccountStates.end())
    {
        auto const& transaction = stateIter->second.mTransaction;

        if (transaction)
        {
            currentTx = transaction->mTx;

            // Check if the tx is a duplicate
            if (isDuplicateTx(currentTx, tx))
            {
                return AddResult(
                    TransactionQueue::AddResultCode::ADD_STATUS_DUPLICATE);
            }

            // Any transaction older than the current one is invalid
            if (tx->getSeqNum() < currentTx->getSeqNum())
            {
                // If the transaction is older than the one in the queue, we
                // reject it
                return AddResult(
                    TransactionQueue::AddResultCode::ADD_STATUS_ERROR, *tx,
                    txBAD_SEQ);
            }

            // Before rejecting Soroban transactions due to source account
            // limit, check validity of its declared resources, and return an
            // appropriate error message
            if (tx->isSoroban())
            {
                if (!tx->checkSorobanResources(
                        mApp.getLedgerManager()
                            .getLastClosedSorobanNetworkConfig(),
                        ledgerVersion, diagnosticEvents))
                {
                    return AddResult(AddResultCode::ADD_STATUS_ERROR, *tx,
                                     txSOROBAN_INVALID,
                                     diagnosticEvents.finalize());
                }
            }

            if (tx->getEnvelope().type() != ENVELOPE_TYPE_TX_FEE_BUMP)
            {
                // If there's already a transaction in the queue, we reject
                // any new transaction
                return AddResult(TransactionQueue::AddResultCode::
                                     ADD_STATUS_TRY_AGAIN_LATER);
            }
            else
            {
                if (tx->getSeqNum() != currentTx->getSeqNum())
                {
                    // New fee-bump transaction is rejected
                    return AddResult(TransactionQueue::AddResultCode::
                                         ADD_STATUS_TRY_AGAIN_LATER);
                }

                int64_t minFee;
                if (!canReplaceByFee(tx, currentTx, minFee))
                {
                    auto txResult = tx->createTxErrorResult(txINSUFFICIENT_FEE);
                    txResult->setInsufficientFeeErrorWithFeeCharged(minFee);
                    return AddResult(
                        TransactionQueue::AddResultCode::ADD_STATUS_ERROR,
                        std::move(txResult));
                }

                if (currentTx->getFeeSourceID() == tx->getFeeSourceID())
                {
                    newFullFee -= currentTx->getFullFee();
                }
            }
        }
    }

    LedgerSnapshot ls(mApp);
    // Subtle: transactions are rejected based on the source account limit
    // prior to this point. This is safe because we can't evict transactions
    // from the same source account, so a newer transaction won't replace an
    // old one.
    auto canAddRes =
        mTxQueueLimiter->canAddTx(tx, currentTx, txsToEvict, ledgerVersion);
    if (!canAddRes.first)
    {
        ban({tx});
        if (canAddRes.second != 0)
        {
            auto txResult = tx->createValidationSuccessResult();
            txResult->setInsufficientFeeErrorWithFeeCharged(canAddRes.second);
            return AddResult(TransactionQueue::AddResultCode::ADD_STATUS_ERROR,
                             std::move(txResult));
        }
        return AddResult(
            TransactionQueue::AddResultCode::ADD_STATUS_TRY_AGAIN_LATER);
    }

    auto closeTime = mApp.getLedgerManager()
                         .getLastClosedLedgerHeader()
                         .header.scpValue.closeTime;
    if (protocolVersionStartsFrom(ledgerVersion, ProtocolVersion::V_19))
    {
        // This is done so minSeqLedgerGap is validated against the next
        // ledgerSeq, which is what will be used at apply time
        ls.getLedgerHeader().currentToModify().ledgerSeq =
            mApp.getLedgerManager().getLastClosedLedgerNum() + 1;
    }

    // Loadgen txs were generated by this local node, and therefore can skip
    // validation, and be added directly to the queue.
#ifdef BUILD_TESTS
    if (!isLoadgenTx)
#endif
    {
        auto validationResult = tx->checkValid(
            mApp.getAppConnector(), ls, 0, 0,
            getUpperBoundCloseTimeOffset(mApp, closeTime), diagnosticEvents);
        if (!validationResult->isSuccess())
        {
            return AddResult(TransactionQueue::AddResultCode::ADD_STATUS_ERROR,
                             std::move(validationResult),
                             diagnosticEvents.finalize());
        }
    }

    // Note: stateIter corresponds to getSourceID() which is not necessarily
    // the same as getFeeSourceID()
    // Loadgen transactions are given unlimited funds, and therefore do no need
    // to be checked for fees
#ifdef BUILD_TESTS
    if (!isLoadgenTx && !mApp.getRunInOverlayOnlyMode())
#endif
    {
        auto const feeSource = ls.getAccount(tx->getFeeSourceID());
        auto feeStateIter = mAccountStates.find(tx->getFeeSourceID());
        int64_t totalFees = feeStateIter == mAccountStates.end()
                                ? 0
                                : feeStateIter->second.mTotalFees;
        if (getAvailableBalance(ls.getLedgerHeader().current(),
                                feeSource.current()) -
                newFullFee <
            totalFees)
        {
            return AddResult(TransactionQueue::AddResultCode::ADD_STATUS_ERROR,
                             *tx, txINSUFFICIENT_BALANCE);
        }
    }

    if (!tx->validateSorobanMemoForFlooding())
    {
        diagnosticEvents.pushError(
            SCE_CONTEXT, SCEC_INVALID_INPUT,
            "non-source auth Soroban tx uses memo or muxed source account");

        return AddResult(TransactionQueue::AddResultCode::ADD_STATUS_ERROR, *tx,
                         txSOROBAN_INVALID, diagnosticEvents.finalize());
    }

    return AddResult(TransactionQueue::AddResultCode::ADD_STATUS_PENDING,
                     tx->createValidationSuccessResult());
}

void
TransactionQueue::releaseFeeMaybeEraseAccountState(TransactionFrameBasePtr tx)
{
    auto iter = mAccountStates.find(tx->getFeeSourceID());
    releaseAssert(iter != mAccountStates.end() &&
                  iter->second.mTotalFees >= tx->getFullFee());

    iter->second.mTotalFees -= tx->getFullFee();
    if (!iter->second.mTransaction && iter->second.mTotalFees == 0)
    {
        mAccountStates.erase(iter);
    }
}

void
TransactionQueue::prepareDropTransaction(AccountState& as)
{
    releaseAssert(as.mTransaction);
    mTxQueueLimiter->removeTransaction(as.mTransaction->mTx);
    mKnownTxHashes.erase(as.mTransaction->mTx->getFullHash());
    CLOG_DEBUG(Tx, "Dropping {} transaction",
               hexAbbrev(as.mTransaction->mTx->getFullHash()));
    releaseFeeMaybeEraseAccountState(as.mTransaction->mTx);
}

// Heuristic: an "arbitrage transaction" as identified by this function as
// any tx that has 1 or more path payments in it that collectively form a
// payment _loop_. That is: a tx that performs a sequence of order-book
// conversions of at least some quantity of some asset _back_ to itself via
// some number of intermediate steps. Typically these are only a single
// path-payment op, but for thoroughness sake we're also going to cover
// cases where there's any atomic _sequence_ of path payment ops that cause
// a conversion-loop.
//
// Such transactions are not going to be outright banned, note: just damped
// so that they do not overload the network. Currently people are submitting
// thousands of such txs per second in an attempt to win races for
// arbitrage, and we just want to make those races a behave more like
// bidding wars than pure resource-wasting races.
//
// This function doesn't catch all forms of arbitrage -- there are an
// unlimited number of types, many of which involve holding assets,
// interacting with real-world actors, etc. and are indistinguishable from
// "real" traffic -- but it does cover the case of zero-risk (fee-only)
// instantaneous-arbitrage attempts, which users are (at the time of
// writing) flooding the network with.
std::vector<AssetPair>
TransactionQueue::findAllAssetPairsInvolvedInPaymentLoops(
    TransactionFrameBasePtr tx)
{
    std::map<Asset, size_t> assetToNum;
    std::vector<Asset> numToAsset;
    std::vector<BitSet> graph;

    auto internAsset = [&](Asset const& a) -> size_t {
        size_t n = numToAsset.size();
        auto pair = assetToNum.emplace(a, n);
        if (pair.second)
        {
            numToAsset.emplace_back(a);
            graph.emplace_back(BitSet());
        }
        return pair.first->second;
    };

    auto internEdge = [&](Asset const& src, Asset const& dst) {
        auto si = internAsset(src);
        auto di = internAsset(dst);
        graph.at(si).set(di);
    };

    auto internSegment = [&](Asset const& src, Asset const& dst,
                             std::vector<Asset> const& path) {
        Asset const* prev = &src;
        for (auto const& a : path)
        {
            internEdge(*prev, a);
            prev = &a;
        }
        internEdge(*prev, dst);
    };

    for (auto const& op : tx->getRawOperations())
    {
        switch (op.body.type())
        {
        case PATH_PAYMENT_STRICT_RECEIVE:
        {
            auto const& pop = op.body.pathPaymentStrictReceiveOp();
            internSegment(pop.sendAsset, pop.destAsset, pop.path);
        }
        break;
        case PATH_PAYMENT_STRICT_SEND:
        {
            auto const& pop = op.body.pathPaymentStrictSendOp();
            internSegment(pop.sendAsset, pop.destAsset, pop.path);
        }
        break;
        default:
            continue;
        }
    }

    // We build a TarjanSCCCalculator for the graph of all the edges we've
    // seen, and return the set of edges that participate in nontrivial SCCs
    // (which are loops). This is O(|v| + |e|) and just operations on a
    // vector of pairs of integers.

    TarjanSCCCalculator tsc;
    tsc.calculateSCCs(graph.size(), [&graph](size_t i) -> BitSet const& {
        // NB: this closure must be written with the explicit const&
        // returning type signature, otherwise it infers wrong and
        // winds up returning a dangling reference at its site of use.
        return graph.at(i);
    });

    std::vector<AssetPair> ret;
    for (BitSet const& scc : tsc.mSCCs)
    {
        if (scc.count() > 1)
        {
            for (size_t src = 0; scc.nextSet(src); ++src)
            {
                BitSet edgesFromSrcInSCC = graph.at(src);
                edgesFromSrcInSCC.inplaceIntersection(scc);
                for (size_t dst = 0; edgesFromSrcInSCC.nextSet(dst); ++dst)
                {
                    ret.emplace_back(
                        AssetPair{numToAsset.at(src), numToAsset.at(dst)});
                }
            }
        }
    }
    return ret;
}

TransactionQueue::AddResult
TransactionQueue::tryAdd(TransactionFrameBasePtr tx, bool submittedFromSelf
#ifdef BUILD_TESTS
                         ,
                         bool isLoadgenTx
#endif
)
{
    ZoneScoped;

    auto c1 =
        tx->getEnvelope().type() == ENVELOPE_TYPE_TX_FEE_BUMP &&
        tx->getEnvelope().feeBump().tx.innerTx.type() == ENVELOPE_TYPE_TX &&
        tx->getEnvelope().feeBump().tx.innerTx.v1().tx.ext.v() == 1;
    auto c2 = tx->getEnvelope().type() == ENVELOPE_TYPE_TX &&
              tx->getEnvelope().v1().tx.ext.v() == 1;
    // Check basic structure validity _before_ any fee-related computation
    // fast fail when Soroban tx is malformed
    if ((tx->isSoroban() != (c1 || c2)) || !tx->XDRProvidesValidFee())
    {
        return AddResult(TransactionQueue::AddResultCode::ADD_STATUS_ERROR, *tx,
                         txMALFORMED);
    }

    AccountStates::iterator stateIter;

    std::vector<std::pair<TransactionFrameBasePtr, bool>> txsToEvict;
    auto res = canAdd(tx, stateIter, txsToEvict
#ifdef BUILD_TESTS
                      ,
                      isLoadgenTx
#endif
    );
    if (res.code != TransactionQueue::AddResultCode::ADD_STATUS_PENDING)
    {
        return res;
    }

    // only evict if successful
    if (stateIter == mAccountStates.end())
    {
        stateIter =
            mAccountStates.emplace(tx->getSourceID(), AccountState{}).first;
    }

    auto& oldTx = stateIter->second.mTransaction;

    if (oldTx)
    {
        // Drop current transaction associated with this account, replace
        // with `tx`
        prepareDropTransaction(stateIter->second);
        *oldTx = {tx, false, mApp.getClock().now(), submittedFromSelf};
    }
    else
    {
        // New transaction for this account, insert it and update age
        stateIter->second.mTransaction = {tx, false, mApp.getClock().now(),
                                          submittedFromSelf};
        mQueueMetrics->mSizeByAge[stateIter->second.mAge]->inc();
    }

    // Update fee accounting
    auto& thisAccountState = mAccountStates[tx->getFeeSourceID()];
    thisAccountState.mTotalFees += tx->getFullFee();

    // make space so that we can add this transaction
    // this will succeed as `canAdd` ensures that this is the case
    mTxQueueLimiter->evictTransactions(
        txsToEvict, *tx,
        [this](TransactionFrameBasePtr const& txToEvict) { ban({txToEvict}); });
    mTxQueueLimiter->addTransaction(tx);
    mKnownTxHashes[tx->getFullHash()] = tx;

    broadcast(false);

    return res;
}

void
TransactionQueue::dropTransaction(AccountStates::iterator stateIter)
{
    ZoneScoped;
    // Remove fees and update queue size for each transaction to be dropped.
    // Note prepareDropTransaction may erase other iterators from
    // mAccountStates, but it will not erase stateIter because it has at
    // least one transaction (otherwise we couldn't reach that line).
    releaseAssert(stateIter->second.mTransaction);

    prepareDropTransaction(stateIter->second);

    // Actually erase the transaction to be dropped.
    stateIter->second.mTransaction.reset();

    // If the queue for stateIter is now empty, then (1) erase it if it is
    // not the fee-source for some other transaction or (2) reset the age
    // otherwise.
    if (stateIter->second.mTotalFees == 0)
    {
        mAccountStates.erase(stateIter);
    }
    else
    {
        stateIter->second.mAge = 0;
    }
}

void
TransactionQueue::removeApplied(Transactions const& appliedTxs)
{
    ZoneScoped;

    auto now = mApp.getClock().now();
    for (auto const& appliedTx : appliedTxs)
    {
        // If the source account is not in mAccountStates, then it has no
        // transactions in the queue so there is nothing to do
        auto stateIter = mAccountStates.find(appliedTx->getSourceID());
        if (stateIter != mAccountStates.end())
        {
            // If there are no transactions in the queue for this source
            // account, then there is nothing to do
            auto const& transaction = stateIter->second.mTransaction;
            if (transaction)
            {
                // We care about matching the sequence number rather than
                // the hash, because any transaction with a sequence number
                // less-than-or-equal to the highest applied sequence number
                // for this source account has either (1) been applied, or
                // (2) become invalid.
                if (transaction->mTx->getSeqNum() <= appliedTx->getSeqNum())
                {
                    auto& age = stateIter->second.mAge;
                    mQueueMetrics->mSizeByAge[age]->dec();
                    age = 0;

                    // update the metric for the time spent for applied
                    // transactions using exact match
                    if (transaction->mTx->getFullHash() ==
                        appliedTx->getFullHash())
                    {
                        auto elapsed = std::chrono::duration_cast<
                            std::chrono::milliseconds>(
                            now - transaction->mInsertionTime);
                        mQueueMetrics->mTransactionsDelayAccumulator.inc(
                            elapsed.count());
                        mQueueMetrics->mTransactionsDelayCounter.inc();
                        if (transaction->mSubmittedFromSelf)
                        {
                            mQueueMetrics->mTransactionsSelfDelayAccumulator
                                .inc(elapsed.count());
                            mQueueMetrics->mTransactionsSelfDelayCounter.inc();
                        }
                    }

                    // WARNING: stateIter and everything that references it
                    // may be invalid from this point onward and should not
                    // be used.
                    dropTransaction(stateIter);
                }
            }
        }

        // Ban applied tx
        auto& bannedFront = mBannedTransactions.front();
        bannedFront.emplace(appliedTx->getFullHash());
        CLOG_DEBUG(Tx, "Ban applied transaction {}",
                   hexAbbrev(appliedTx->getFullHash()));

        // do not mark metric for banning as this is the result of normal
        // flow of operations
    }
}

void
TransactionQueue::ban(Transactions const& banTxs)
{
    ZoneScoped;
    auto& bannedFront = mBannedTransactions.front();

    // Group the transactions by source account and ban all the transactions
    // that are explicitly listed
    std::map<AccountID, TransactionFrameBasePtr> transactionsByAccount;
    for (auto const& tx : banTxs)
    {
        // Must be a new transaction for this account
        releaseAssert(
            transactionsByAccount.emplace(tx->getSourceID(), tx).second);
        CLOG_DEBUG(Tx, "Ban transaction {}", hexAbbrev(tx->getFullHash()));
        if (bannedFront.emplace(tx->getFullHash()).second)
        {
            mQueueMetrics->mBannedTransactionsCounter.inc();
        }
    }

    for (auto const& kv : transactionsByAccount)
    {
        // If the source account is not in mAccountStates, then it has no
        // transactions in the queue so there is nothing to do
        auto stateIter = mAccountStates.find(kv.first);
        if (stateIter != mAccountStates.end())
        {
            auto const& transaction = stateIter->second.mTransaction;
            // Only ban transactions that are actually present in the queue.
            // Transactions with higher sequence numbers than banned
            // transactions remain in the queue.
            if (transaction &&
                transaction->mTx->getFullHash() == kv.second->getFullHash())
            {
                mQueueMetrics->mSizeByAge[stateIter->second.mAge]->dec();
                // WARNING: stateIter and everything that references it may
                // be invalid from this point onward and should not be used.
                dropTransaction(stateIter);
            }
        }
    }
}

#ifdef BUILD_TESTS
TransactionQueue::AccountState
TransactionQueue::getAccountTransactionQueueInfo(
    AccountID const& accountID) const
{
    auto i = mAccountStates.find(accountID);
    if (i == std::end(mAccountStates))
    {
        return AccountState{};
    }
    return i->second;
}

size_t
TransactionQueue::countBanned(int index) const
{
    return mBannedTransactions[index].size();
}
#endif

void
TransactionQueue::shift()
{
    ZoneScoped;
    mBannedTransactions.pop_back();
    mBannedTransactions.emplace_front();
    mArbitrageFloodDamping.clear();

    auto sizes = std::vector<int64_t>{};
    sizes.resize(mPendingDepth);

    auto& bannedFront = mBannedTransactions.front();
    auto end = std::end(mAccountStates);
    auto it = std::begin(mAccountStates);
    while (it != end)
    {
        // If mTransactions is empty then mAge is always 0. This can occur
        // if an account is the fee-source for at least one transaction but
        // not the sequence-number-source for any transaction in the
        // TransactionQueue.
        if (it->second.mTransaction)
        {
            ++it->second.mAge;
        }

        if (mPendingDepth == it->second.mAge)
        {
            if (it->second.mTransaction)
            {
                // This never invalidates it because
                //     it->second.mTransaction
                // otherwise we couldn't have reached this line.
                prepareDropTransaction(it->second);
                CLOG_DEBUG(
                    Tx, "Ban transaction {}",
                    hexAbbrev(it->second.mTransaction->mTx->getFullHash()));
                bannedFront.insert(it->second.mTransaction->mTx->getFullHash());
                mQueueMetrics->mBannedTransactionsCounter.inc();
                it->second.mTransaction.reset();
            }
            if (it->second.mTotalFees == 0)
            {
                it = mAccountStates.erase(it);
            }
            else
            {
                it->second.mAge = 0;
            }
        }
        else
        {
            sizes[it->second.mAge] +=
                static_cast<int>(it->second.mTransaction.has_value());
            ++it;
        }
    }

    for (size_t i = 0; i < sizes.size(); i++)
    {
        mQueueMetrics->mSizeByAge[i]->set_count(sizes[i]);
    }
    mTxQueueLimiter->resetEvictionState();
    // pick a new randomizing seed for tie breaking
    mBroadcastSeed =
        rand_uniform<uint64>(0, std::numeric_limits<uint64>::max());
}

bool
TransactionQueue::isBanned(Hash const& hash) const
{
    return std::any_of(
        std::begin(mBannedTransactions), std::end(mBannedTransactions),
        [&](UnorderedSet<Hash> const& transactions) {
            return transactions.find(hash) != std::end(transactions);
        });
}

TxFrameList
TransactionQueue::getTransactions(LedgerHeader const& lcl) const
{
    ZoneScoped;
    TxFrameList txs;

    uint32_t const nextLedgerSeq = lcl.ledgerSeq + 1;
    int64_t const startingSeq = getStartingSequenceNumber(nextLedgerSeq);
    for (auto const& m : mAccountStates)
    {
        if (m.second.mTransaction &&
            m.second.mTransaction->mTx->getSeqNum() != startingSeq)
        {
            txs.emplace_back(m.second.mTransaction->mTx);
        }
    }

    return txs;
}

TransactionFrameBaseConstPtr
TransactionQueue::getTx(Hash const& hash) const
{
    ZoneScoped;
    auto it = mKnownTxHashes.find(hash);
    if (it != mKnownTxHashes.end())
    {
        return it->second;
    }
    else
    {
        return nullptr;
    }
}

std::pair<Resource, std::optional<Resource>>
ClassicTransactionQueue::getMaxResourcesToFloodThisPeriod() const
{
    auto& cfg = mApp.getConfig();
    double opRatePerLedger = cfg.FLOOD_OP_RATE_PER_LEDGER;

    auto maxOps = mApp.getLedgerManager().getLastMaxTxSetSizeOps();
    double opsToFloodLedgerDbl = opRatePerLedger * maxOps;
    releaseAssertOrThrow(opsToFloodLedgerDbl >= 0.0);
    releaseAssertOrThrow(isRepresentableAsInt64(opsToFloodLedgerDbl));
    int64_t opsToFloodLedger = static_cast<int64_t>(opsToFloodLedgerDbl);

    auto opsToFlood =
        mBroadcastOpCarryover[SurgePricingPriorityQueue::GENERIC_LANE] +
        Resource(bigDivideOrThrow(
            opsToFloodLedger, getFloodPeriod(),
            mApp.getLedgerManager().getExpectedLedgerCloseTime().count(),
            Rounding::ROUND_UP));
    releaseAssertOrThrow(Resource(0) <= opsToFlood &&
                         opsToFlood <=
                             Resource(std::numeric_limits<uint32_t>::max()));

    auto maxDexOps = cfg.MAX_DEX_TX_OPERATIONS_IN_TX_SET;
    std::optional<Resource> dexOpsToFlood;
    if (maxDexOps)
    {
        *maxDexOps = std::min(maxOps, *maxDexOps);
        uint32_t dexOpsToFloodLedger =
            static_cast<uint32_t>(*maxDexOps * opRatePerLedger);
        auto dexOpsCarryover =
            mBroadcastOpCarryover.size() > DexLimitingLaneConfig::DEX_LANE
                ? mBroadcastOpCarryover[DexLimitingLaneConfig::DEX_LANE]
                : 0;
        auto dexOpsToFloodUint =
            dexOpsCarryover +
            static_cast<uint32>(bigDivideOrThrow(
                dexOpsToFloodLedger, getFloodPeriod(),
                mApp.getLedgerManager().getExpectedLedgerCloseTime().count(),
                Rounding::ROUND_UP));
        dexOpsToFlood = dexOpsToFloodUint;
    }
    return std::make_pair(opsToFlood, dexOpsToFlood);
}

TransactionQueue::BroadcastStatus
TransactionQueue::broadcastTx(TimestampedTx& tx)
{
    if (tx.mBroadcasted)
    {
        return BroadcastStatus::BROADCAST_STATUS_ALREADY;
    }

    bool allowTx = allowTxBroadcast(tx);

#ifdef BUILD_TESTS
    if (mTxBroadcastedEvent)
    {
        mTxBroadcastedEvent(tx.mTx);
    }
#endif

    // Mark the tx as effectively "broadcast" and update the per-account
    // queue to count it as consumption from that balance, for proper
    // overall queue accounting (whether or not we will actually broadcast
    // it).
    tx.mBroadcasted = true;

    if (!allowTx)
    {
        // If we decide not to broadcast for real (due to damping) we return
        // false to our caller so that they will not count this tx against
        // the per-timeslice counters -- we want to allow the caller to try
        // useful work from other sources.
        return BroadcastStatus::BROADCAST_STATUS_SKIPPED;
    }
    return mApp.getOverlayManager().broadcastMessage(
               tx.mTx->toStellarMessage(),
               std::make_optional<Hash>(tx.mTx->getFullHash()))
               ? BroadcastStatus::BROADCAST_STATUS_SUCCESS
               : BroadcastStatus::BROADCAST_STATUS_ALREADY;
}

SorobanTransactionQueue::SorobanTransactionQueue(Application& app,
                                                 uint32 pendingDepth,
                                                 uint32 banDepth,
                                                 uint32 poolLedgerMultiplier)
    : TransactionQueue(app, pendingDepth, banDepth, poolLedgerMultiplier, true)
{

    std::vector<medida::Counter*> sizeByAge;
    for (uint32 i = 0; i < mPendingDepth; i++)
    {
        sizeByAge.emplace_back(&app.getMetrics().NewCounter(
            {"herder", "pending-soroban-txs",
             fmt::format(FMT_STRING("age{:d}"), i)}));
    }
    mQueueMetrics = std::make_unique<QueueMetrics>(
        sizeByAge,
        app.getMetrics().NewCounter(
            {"herder", "pending-soroban-txs", "banned"}),
        app.getMetrics().NewCounter({"herder", "pending-soroban-txs", "sum"}),
        app.getMetrics().NewCounter({"herder", "pending-soroban-txs", "count"}),
        app.getMetrics().NewCounter(
            {"herder", "pending-soroban-txs", "self-sum"}),
        app.getMetrics().NewCounter(
            {"herder", "pending-soroban-txs", "self-count"}),
        app.getMetrics().NewCounter(
            {"herder", "pending-soroban-txs", "filtered-due-to-fp-keys"}));
    mBroadcastOpCarryover.resize(1, Resource::makeEmptySoroban());

    for (size_t i = 0; i < KEYS_TO_FILTER_COUNT; ++i)
    {
        LedgerKey key;
        fromOpaqueBase64(key, KEYS_TO_FILTER_BASE64[i]);
        mKeysToFilter.insert(key);
    }

    auto const& additionalKeysToFilterPath =
        app.getConfig().FILTERED_SOROBAN_KEYS_PATH;
    if (!additionalKeysToFilterPath.empty())
    {
        if (!fs::exists(additionalKeysToFilterPath))
        {
            throw std::runtime_error(
                "The file with filtered Soroban keys does not exist: " +
                additionalKeysToFilterPath);
        }
        XDRInputFileStream stream{};
        stream.open(additionalKeysToFilterPath);
        LedgerKey key;
        while (stream.readOne(key))
        {
            mKeysToFilter.insert(key);
        }
        stream.close();
    }
}

std::pair<Resource, std::optional<Resource>>
SorobanTransactionQueue::getMaxResourcesToFloodThisPeriod() const
{
    auto const& cfg = mApp.getConfig();
    double ratePerLedger = cfg.FLOOD_SOROBAN_RATE_PER_LEDGER;

    auto sorRes = mApp.getLedgerManager().maxLedgerResources(true);

    auto totalFloodPerLedger = multiplyByDouble(sorRes, ratePerLedger);

    Resource resToFlood =
        mBroadcastOpCarryover[SurgePricingPriorityQueue::GENERIC_LANE] +
        bigDivideOrThrow(
            totalFloodPerLedger, getFloodPeriod(),
            mApp.getLedgerManager().getExpectedLedgerCloseTime().count(),
            Rounding::ROUND_UP);
    return std::make_pair(resToFlood, std::nullopt);
}

bool
SorobanTransactionQueue::broadcastSome()
{
    // broadcast transactions in surge pricing order:
    // loop over transactions by picking from the account queue with the
    // highest base fee not broadcasted so far.
    // This broadcasts from account queues in order as to maximize chances
    // of propagation.
    auto resToFlood = getMaxResourcesToFloodThisPeriod().first;

    auto totalResToFlood = Resource::makeEmptySoroban();
    std::vector<TransactionFrameBasePtr> txsToBroadcast;
    std::unordered_map<TransactionFrameBasePtr, AccountState*> txToAccountState;
    auto ledgerVersion = mApp.getLedgerManager()
                             .getLastClosedLedgerHeader()
                             .header.ledgerVersion;
    for (auto& [_, accountState] : mAccountStates)
    {
        if (accountState.mTransaction &&
            !accountState.mTransaction->mBroadcasted)
        {
            auto tx = accountState.mTransaction->mTx;
            txsToBroadcast.emplace_back(tx);
            totalResToFlood += tx->getResources(
                /* useByteLimitInClassic */ false, ledgerVersion);
            txToAccountState[tx] = &accountState;
        }
    }

    auto visitor = [this, &totalResToFlood, ledgerVersion,
                    &txToAccountState](TransactionFrameBasePtr const& tx) {
        auto& accState = *txToAccountState.at(tx);
        // look at the next candidate transaction for that account
        auto& cur = *accState.mTransaction;
        // by construction, cur points to non broadcasted transactions
        releaseAssert(!cur.mBroadcasted);
        auto bStatus = broadcastTx(cur);
        // Skipped does not apply to Soroban
        releaseAssert(bStatus != BroadcastStatus::BROADCAST_STATUS_SKIPPED);
        if (bStatus == BroadcastStatus::BROADCAST_STATUS_SUCCESS)
        {
            totalResToFlood -= tx->getResources(
                /* useByteLimitInClassic */ false, ledgerVersion);
            return SurgePricingPriorityQueue::VisitTxResult::PROCESSED;
        }
        else
        {
            // Already broadcasted, skip the transaction and don't count it
            // towards the total resources to flood.
            return SurgePricingPriorityQueue::VisitTxResult::SKIPPED;
        }
    };

    SurgePricingPriorityQueue queue(
        /* isHighestPriority */ true,
        std::make_shared<SorobanGenericLaneConfig>(resToFlood), mBroadcastSeed);
    queue.visitTopTxs(txsToBroadcast, visitor, mBroadcastOpCarryover,
                      ledgerVersion);

    Resource maxPerTx =
        mApp.getLedgerManager().maxSorobanTransactionResources();
    for (auto& resLeft : mBroadcastOpCarryover)
    {
        // Limit carry-over to 1 maximum resource transaction
        resLeft = limitTo(resLeft, maxPerTx);
    }
    return !totalResToFlood.isZero();
}

size_t
SorobanTransactionQueue::getMaxQueueSizeOps() const
{
    if (protocolVersionStartsFrom(mApp.getLedgerManager()
                                      .getLastClosedLedgerHeader()
                                      .header.ledgerVersion,
                                  SOROBAN_PROTOCOL_VERSION))
    {
        auto res = mTxQueueLimiter->maxScaledLedgerResources(true);
        releaseAssert(res.size() == NUM_SOROBAN_TX_RESOURCES);
        return res.getVal(Resource::Type::OPERATIONS);
    }
    else
    {
        return 0;
    }
}

void
SorobanTransactionQueue::resetAndRebuild()
{
    ZoneScoped;
    releaseAssert(threadIsMain());

    CLOG_DEBUG(Herder, "Resetting Soroban transaction queue due to upgrade");

    // Extract all current transactions before clearing state
    std::vector<TransactionFrameBasePtr> existingTxs;
    for (auto const& [accountID, accountState] : mAccountStates)
    {
        if (accountState.mTransaction)
        {
            existingTxs.emplace_back(accountState.mTransaction->mTx);
        }
    }

    // Clear all relevant queue state. mArbitrageFloodDamping and
    // mBannedTransactions cannot be invalidated by a protocol upgrade.
    mAccountStates.clear();
    mKnownTxHashes.clear();

    auto lhhe = mApp.getLedgerManager().getLastClosedLedgerHeader();
    mTxQueueLimiter->reset(lhhe.header.ledgerVersion);

    // Re-add all existing transactions
    // The surge pricing logic in tryAdd will handle sorting and evictions
    // based on the new limits
    for (auto const& tx : existingTxs)
    {
        // For simplicity assume no TXs in the queue are submitted from self. We
        // might lose some metrics here but this is only called on network
        // upgrades.
        tryAdd(tx, /*submittedFromSelf=*/false);
    }
}

bool
ClassicTransactionQueue::broadcastSome()
{
    // broadcast transactions in surge pricing order:
    // loop over transactions by picking from the account queue with the
    // highest base fee not broadcasted so far.
    // This broadcasts from account queues in order as to maximize chances
    // of propagation.
    auto [opsToFlood, dexOpsToFlood] = getMaxResourcesToFloodThisPeriod();
    releaseAssert(opsToFlood.size() == NUM_CLASSIC_TX_RESOURCES);
    if (dexOpsToFlood)
    {
        releaseAssert(dexOpsToFlood->size() == NUM_CLASSIC_TX_RESOURCES);
    }

    auto totalToFlood = Resource::makeEmpty(NUM_CLASSIC_TX_RESOURCES);
    std::vector<TransactionFrameBasePtr> txsToBroadcast;
    std::unordered_map<TransactionFrameBasePtr, AccountState*> txToAccountState;
    for (auto& [_, accountState] : mAccountStates)
    {
        if (accountState.mTransaction &&
            !accountState.mTransaction->mBroadcasted)
        {
            auto tx = accountState.mTransaction->mTx;
            txsToBroadcast.emplace_back(tx);
            totalToFlood += Resource(tx->getNumOperations());
            txToAccountState[tx] = &accountState;
        }
    }

    std::vector<TransactionFrameBasePtr> banningTxs;
    auto ledgerVersion = mApp.getLedgerManager()
                             .getLastClosedLedgerHeader()
                             .header.ledgerVersion;
    auto visitor = [this, &totalToFlood, &banningTxs, &txToAccountState,
                    ledgerVersion](TransactionFrameBasePtr const& tx) {
        auto const& curTracker = txToAccountState.at(tx);
        // look at the next candidate transaction for that account
        auto& cur = *curTracker->mTransaction;
        // by construction, cur points to non broadcasted transactions
        releaseAssert(!cur.mBroadcasted);
        auto bStatus = broadcastTx(cur);
        if (bStatus == BroadcastStatus::BROADCAST_STATUS_SUCCESS)
        {
            totalToFlood -= tx->getResources(/* useByteLimitInClassic */ false,
                                             ledgerVersion);
            return SurgePricingPriorityQueue::VisitTxResult::PROCESSED;
        }
        else if (bStatus == BroadcastStatus::BROADCAST_STATUS_SKIPPED)
        {
            // When skipping, we ban the transaction and skip its resources.
            banningTxs.emplace_back(tx);
            return SurgePricingPriorityQueue::VisitTxResult::SKIPPED;
        }
        else
        {
            // Already broadcasted, skip the transaction and don't count it
            // towards the total resources to flood.
            return SurgePricingPriorityQueue::VisitTxResult::SKIPPED;
        }
    };

    SurgePricingPriorityQueue queue(
        /* isHighestPriority */ true,
        std::make_shared<DexLimitingLaneConfig>(opsToFlood, dexOpsToFlood),
        mBroadcastSeed);
    queue.visitTopTxs(txsToBroadcast, visitor, mBroadcastOpCarryover,
                      ledgerVersion);
    ban(banningTxs);
    // carry over remainder, up to MAX_OPS_PER_TX ops
    // reason is that if we add 1 next round, we can flood a "worst case fee
    // bump" tx
    for (auto& opsLeft : mBroadcastOpCarryover)
    {
        releaseAssert(opsLeft.size() == NUM_CLASSIC_TX_RESOURCES);
        opsLeft = limitTo(opsLeft, Resource(MAX_OPS_PER_TX + 1));
    }
    return !totalToFlood.isZero();
}

void
TransactionQueue::broadcast(bool fromCallback)
{
    if (mShutdown || (!fromCallback && mWaiting))
    {
        return;
    }
    mWaiting = false;

    bool needsMore = false;
    if (!fromCallback)
    {
        // don't do anything right away, wait for the timer
        needsMore = true;
    }
    else
    {
        needsMore = broadcastSome();
    }

    if (needsMore)
    {
        mWaiting = true;
        mBroadcastTimer.expires_from_now(
            std::chrono::milliseconds(getFloodPeriod()));
        mBroadcastTimer.async_wait([this]() { broadcast(true); },
                                   &VirtualTimer::onFailureNoop);
    }
}

void
TransactionQueue::rebroadcast()
{
    // force to rebroadcast everything
    for (auto& m : mAccountStates)
    {
        auto& as = m.second;
        if (as.mTransaction)
        {
            as.mTransaction->mBroadcasted = false;
        }
    }
    broadcast(false);
}

void
TransactionQueue::shutdown()
{
    mShutdown = true;
    mBroadcastTimer.cancel();
}

static bool
containsFilteredOperation(std::vector<Operation> const& ops,
                          UnorderedSet<OperationType> const& filteredTypes)
{
    return std::any_of(ops.begin(), ops.end(), [&](auto const& op) {
        return filteredTypes.find(op.body.type()) != filteredTypes.end();
    });
}

bool
TransactionQueue::isFiltered(TransactionFrameBasePtr tx) const
{
    // Avoid cost of checking if filtering is not in use
    if (mFilteredTypes.empty())
    {
        return false;
    }

    switch (tx->getEnvelope().type())
    {
    case ENVELOPE_TYPE_TX_V0:
        return containsFilteredOperation(tx->getEnvelope().v0().tx.operations,
                                         mFilteredTypes);
    case ENVELOPE_TYPE_TX:
        return containsFilteredOperation(tx->getEnvelope().v1().tx.operations,
                                         mFilteredTypes);
    case ENVELOPE_TYPE_TX_FEE_BUMP:
    {
        auto const& envelope = tx->getEnvelope().feeBump().tx.innerTx.v1();
        return containsFilteredOperation(envelope.tx.operations,
                                         mFilteredTypes);
    }
    default:
        throw std::runtime_error(fmt::format(
            "TransactionQueue::isFiltered: unexpected envelope type {}",
            static_cast<int>(tx->getEnvelope().type())));
    }
}

#ifdef BUILD_TESTS
size_t
TransactionQueue::getQueueSizeOps() const
{
    return mTxQueueLimiter->size();
}

std::optional<int64_t>
TransactionQueue::getInQueueSeqNum(AccountID const& account) const
{
    auto stateIter = mAccountStates.find(account);
    if (stateIter == mAccountStates.end())
    {
        return std::nullopt;
    }
    if (stateIter->second.mTransaction)
    {
        return stateIter->second.mTransaction->mTx->getSeqNum();
    }
    return std::nullopt;
}
#endif

size_t
ClassicTransactionQueue::getMaxQueueSizeOps() const
{
    auto res = mTxQueueLimiter->maxScaledLedgerResources(false);
    releaseAssert(res.size() == NUM_CLASSIC_TX_RESOURCES);
    return res.getVal(Resource::Type::OPERATIONS);
}
}
