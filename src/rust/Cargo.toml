[package]
name = "stellar-core"
version = "0.1.0"
edition = "2021"
rust-version = "1.71"

[lib]
name = "rust_stellar_core"
crate-type = ["staticlib"]

[dependencies]
log = "0.4.17"
tracy-client = { version = "=0.15.2", features = ["enable"], default-features = false, optional = true}
cxx = "1.0"
base64 = "0.13.0"
rustc-simple-version = "0.1.0"

# This copy of the soroban host is always enabled, and should always point to a
# version that supports stellar-core's Config::CURRENT_LEDGER_PROTOCOL_VERSION.
# When upgrading from protocol N to N+1, this copy will therefore have its
# version advance first (to enable support for N+1) even before the network has
# voted to upgrade to it. In order to avoid divergence during such an upgrade,
# we will simultaneously enable the `prev` copy of soroban (below), continuing
# to point to the previous already-released soroban that only supported protocol
# N.

[dependencies.soroban-env-host-curr]
version = "20.0.0-rc1"
git = "https://github.com/stellar/rs-soroban-env"
package = "soroban-env-host"
rev = "0205cf610457deaf4457d31413caf49d1ed42a61"

# This copy of the soroban host is _optional_ and only enabled during protocol
# transitions. When transitioning from protocol N to N+1, the `curr` copy
# (above) will bump its version to one that supports protocol N+1, and we will
# simultaneously enable this `prev` copy by building with
# `--feature=soroban-env-host-prev` and pointing its version and git rev to the
# last soroban released to the network that speaks protocol N. When we deploy
# this to a network running protocol N it will run on `prev` until the upgrade,
# then switch from `prev` to `curr` at the upgrade, and then in the next release
# we can turn `prev` off again.
#
# A note on `rev` hashes: When `prev` is disabled, the rust-analyzer IDE will
# still want it to point to some version of soroban just for auto-completion
# (because it builds with `--all-features`). To make this work, the `rev` spec
# below has to be different from the `rev` spec in the `curr` copy of soroban
# above. The easiest way to make this work is to just point to one git rev 
# before the rev specified for `curr`.

[dependencies.soroban-env-host-prev]
optional = true
version = "0.0.17"
git = "https://github.com/stellar/rs-soroban-env"
package = "soroban-env-host"
rev = "66a3c504387da5bb5bb0b1cc4b0beb22c74fb252"

[dependencies.soroban-test-wasms]
git = "https://github.com/stellar/rs-soroban-env"
rev = "0205cf610457deaf4457d31413caf49d1ed42a61"

[dependencies.cargo-lock]
git = "https://github.com/rustsec/rustsec"
rev = "a5c69fc6e4b6068b43d7143f3a2f68c3f3de37d8"
features = ["dependency-tree"]

[features]
# These "dep:" feature activations are implied by the optional=true line in the
# deps above, but writing them out in full here cross-checks that nobody
# _removed_ those lines.
soroban-env-host-prev = ["dep:soroban-env-host-prev"]
tracy = ["dep:tracy-client", "soroban-env-host-curr/tracy"]

# This `next` feature switches the `curr` host (and bundled test wasms) to the
# `next` xdr definitions (and protocol number), which is something we trigger
# from core's `configure` script, and do only when building and experimenting
# with prerelease versions of core and the protocol, not something that should
# ever be released. It is therefore not related to the `prev` mechanism, which
# is for release builds that perform protocol cutovers as described above.
next = ["soroban-env-host-curr/next", "soroban-test-wasms/next"]
